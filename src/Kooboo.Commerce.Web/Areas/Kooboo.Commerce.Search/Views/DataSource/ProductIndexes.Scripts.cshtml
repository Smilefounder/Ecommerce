@using Kooboo.Commerce.Data
@using Kooboo.Commerce.Products
@using Kooboo.Commerce.CMSIntegration
@using Kooboo.Commerce.Search.CMSIntegration
@using Newtonsoft.Json

@model Kooboo.CMS.Sites.DataSource.DataSourceSetting

@{
    var site = Kooboo.CMS.Sites.Models.Site.Current;
    var instanceName = site.GetCommerceInstanceName();
    var instance = Kooboo.CMS.Common.Runtime.EngineContext.Current.Resolve<ICommerceInstanceManager>().GetInstance(instanceName);
    var productTypes = instance.Database.GetRepository<ProductType>().Query().ToList();

    var filterDefinitions = FilterDefinition.GetFilterDefinitions(productTypes);

    var serializerSettings = new JsonSerializerSettings { Converters = { new Newtonsoft.Json.Converters.StringEnumConverter() } };
}

<script>

    (function ($) {

        var Metadata = {
            FilterDefinitions: @(Html.Raw(JsonConvert.SerializeObject(filterDefinitions, serializerSettings)))
        };

        var ViewModel = function () {
            var self = this;

            self.DataSource = ko.mapping.fromJS(@(Html.Raw(JsonConvert.SerializeObject(ViewBag.CommerceDataSource))));

            self.UnaddedFilterDefinitions = ko.computed(function () {
                var result = [];
                $.each(Metadata.FilterDefinitions, function () {
                    var def = this;
                    if (!_.any(self.DataSource.Filters(), function (f) { return f.Field() == def.Field })) {
                        result.push(def);
                    }
                });

                return result;
            });

            self.SelectedFilterName = ko.observable();

            self.SelectedFilterDefinition = ko.computed(function () {
                var filterName = self.SelectedFilterName();
                if (!filterName) {
                    return null;
                }

                return _.find(Metadata.FilterDefinitions, function (def) {
                    return def.Name === filterName
                });
            });

            self.AddSelectedFilter = function () {
                var def = self.SelectedFilterDefinition();
                self.DataSource.Filters.push({
                    Name: ko.observable(def.Name),
                    Field: ko.observable(def.Field),
                    LowercaseInput: ko.observable(def.LowercaseInput),
                    UseRangeFiltering: ko.observable(def.SupportRangeFiltering),
                    FieldValue: ko.observable(),
                    FromValue: ko.observable(),
                    FromInclusive: ko.observable(true),
                    ToValue: ko.observable(),
                    ToInclusive: ko.observable(false)
                });
            }

            self.RemoveFilter = function (filter) {
                self.DataSource.Filters.remove(filter);
            }

            self.IsRangeFilteringSupported = function (filterFieldName) {
                var filter = _.find(Metadata.FilterDefinitions, function (def) {
                    return def.Field === filterFieldName;
                });
                return filter.SupportRangeFiltering;
            }

            self.GetFilterHtmlName = function (index, fieldName) {
                return 'DataSource.CommerceDataSource.Filters[' + index + '].' + fieldName;
            }

            self.GetFilterHtmlId = function (index, fieldName) {
                return self.GetFilterHtmlName(index, fieldName).replace(/\./g, '_');
            }
        }

        var viewModel = new ViewModel();

        ko.applyBindings(viewModel, document.getElementById('product-indexes-datasource'));

    })(jQuery);

</script>