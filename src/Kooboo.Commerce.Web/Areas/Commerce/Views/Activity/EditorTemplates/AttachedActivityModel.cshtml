@model AttachedActivityModel

<div class="topbar">
    <h1 class="title">@ViewBag.Title</h1>
</div>
<div class="warp">
    @using (Html.BeginForm("Save", "Activity", RouteValues.From(Request.QueryString)))
    {
        <div class="step-content clearfix">
            <div class="common-form">

                @Html.ValidationSummary(true)
                @Html.HiddenFor(m => m.Id)
                @Html.HiddenFor(m => m.ActivityName)
                @Html.HiddenFor(m => m.RuleBranch)
                <table id="activity-binding-form">
                    <tbody>
                        <tr>
                            <th>@("Activity".Localize())</th>
                            <td>
                                @Model.ActivityDisplayName
                            </td>
                        </tr>
                        @Html.EditorFor(m => m.Description)
                        @Html.EditorFor(m => m.Priority)
                        <tr>
                            <th></th>
                            <td>
                                <div class="clearfix">
                                    @if (Model.ActivityAllowAsyncExecution)
                                    {
                                        @Html.CheckBoxFor(m => m.EnableAsyncExecution)
                                    }
                                    else
                                    {
                                        @Html.CheckBoxFor(m => m.EnableAsyncExecution, new { disabled = "disabled" })
                                    }
                                    @Html.LabelFor(m => m.EnableAsyncExecution, new { @class = "inline" })
                                </div>
                                @if (!Model.ActivityAllowAsyncExecution)
                                {
                                    <div class="block message warning" style="margin-top:5px">
                                        @("This activity does not allow async execution".Localize())
                                    </div>
                                }
                            </td>
                        </tr>
                        <tr class="delay-row" style="display:none">
                            <th>@("Delay".Localize())</th>
                            <td>
                                <div class="columns">
                                    <div class="span3">
                                        @Html.TextBoxFor(m => m.DelayDays, new { @class = "xlarge" })
                                        @("Days".Localize())
                                    </div>
                                    <div class="span3">
                                        @Html.DropDownListFor(m => m.DelayHours, Enumerable.Range(0, 24).ToSelectListItems(), new { @class = "xlarge" })
                                        @("Hours".Localize())
                                    </div>
                                    <div class="span3">
                                        @Html.DropDownListFor(m => m.DelayMinutes, Enumerable.Range(0, 60).ToSelectListItems(), new { @class = "xlarge" })
                                        @("Minutes".Localize())
                                    </div>
                                    <div class="span3">
                                        @Html.DropDownListFor(m => m.DelaySeconds, Enumerable.Range(0, 60).ToSelectListItems(), new { @class = "xlarge" })
                                        @("Seconds".Localize())
                                    </div>
                                </div>
                            </td>
                        </tr>
                        @Html.EditorFor(m => m.IsEnabled)
                    </tbody>
                </table>

                <p class="buttons">
                    <button type="submit" data-ajaxform="">@("Next".Localize()) »</button>
                    <a href="#" class="button gray btn-cancel">@("Cancel".Localize())</a>
                </p>
            </div>
        </div>
    }
</div>
<script>
    (function () {

        updateDelayRowVisibility();

        $(':checkbox[name="EnableAsyncExecution"]').click(function () {
            updateDelayRowVisibility();
        });

        function updateDelayRowVisibility() {
            var enableAsyncExecution = $(':checkbox[name="EnableAsyncExecution"]').is(':checked');
            if (enableAsyncExecution) {
                $('.delay-row').show();
            } else {
                $('.delay-row').hide();
            }
        }

        window.ajaxFormParam = {
            success: function (result) {
                if (result.Model) {
                    var context = window.parent.ViewModel.activityContext();

                    if (result.Model.ConfigUrl) {
                        context.refresh(result.Model.AttachedActivityId);
                        location.href = result.Model.ConfigUrl;
                    } else {
                        context.accept();
                    }
                }
            }
        };

        $('.btn-cancel').on('click', function () {
            window.parent.ViewModel.activityContext().cancel();
        });
    })();
</script>
