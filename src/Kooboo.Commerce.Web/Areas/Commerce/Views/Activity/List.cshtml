@{
    ViewBag.Title = ViewBag.CurrentEventDisplayName;
}

@section ScriptCSS {
    <style>
        .conditions-expression {
            font-family: Consolas, 'Courier New', sans-serif;
            display: inline-block;
            font-size: 14px;
            border-radius: 4px;
        }

            .conditions-expression .string {
                color: #A31515;
            }

            .conditions-expression .keyword {
                color: #0000FF;
            }

            .conditions-expression .param {
                color: #008080;
            }

            .conditions-expression .operator {
                color: #666;
            }

            .conditions-expression .flat-condition {
                background: #eee;
                border-radius: 4px;
                padding: 4px;
            }

        .activity-rule {
            padding: 10px 0;
            border-bottom: #ddd 1px solid;
        }

            .activity-rule .rule-label {
                font-size: 16px;
                color: #3CA8DB;
                display: block;
                text-align: right;
            }

        .attached-activities-holder {
            padding-top: 5px;
        }

        .attached-activities li {
            margin-bottom: 5px;
        }
    </style>
}

<div id="rules-container">
    <div class="toolbar">
        <a href="#" class="button" data-bind="click: addRule">@("Add Rule".Localize())</a>
    </div>
    <!-- ko foreach: rules -->
    <div class="activity-rule">
        <div class="columns" data-bind="if: type() == 'Normal'">
            <div class="span1">
                <span class="rule-label">@("IF".Localize())</span>
            </div>
            <div class="span11">
                <span class="conditions-expression" data-bind="html: highlightedConditionsExpression"></span>
                <a href="#" data-bind="click: $root.editRule">@Html.IconImage("edit small")</a>
                <a href="#" data-bind="click: $root.deleteRule">@Html.IconImage("minus small")</a>
            </div>
        </div>
        <div class="columns">
            <div class="span1">
                <span class="rule-label" data-bind="if: type() == 'Normal'">@("THEN".Localize())</span>
                <span class="rule-label" data-bind="if: type() == 'Always'">@("ALWAYS".Localize())</span>
            </div>
            <div class="span11">
                <div class="attached-activities-holder">
                    <div data-bind="visible: attachedActivities().length > 0" style="display:none">
                        <ul data-bind="foreach: attachedActivities" class="attached-activities">
                            <li>
                                <span style="display:inline-block">
                                    @Html.IconImage("arrow gray-right")
                                </span>
                                <span data-bind="html: description"></span>
                                <a href="#" data-bind="click: $parent.editAttachedActivity" title="@("Edit".Localize())">@Html.IconImage("edit small")</a>
                                <a href="#" data-bind="visible: configUrl, click: $parent.configureAttachedActivity" title="@("Settings".Localize())">@Html.IconImage("edit small")</a>
                                <a href="#" data-bind="click: $parent.detachActivity" title="@("Detach".Localize())">@Html.IconImage("minus small")</a>
                            </li>
                        </ul>
                    </div>
                    <div>
                        <a href="#" style="display:inline-block" data-bind="click: beginAttachActivity" title="Attach activity">@Html.IconImage("plus")</a>
                    </div>
                    <div data-bind="visible: isAttachingActivity" style="display:none">
                        <select class="large" data-bind="options: $root.availableActivities, optionsText: 'displayName', optionsValue: 'name', value: selectedActivityName"></select>
                        <a href="#" class="button" data-bind="click: openAttachDialog">@("Attach".Localize())</a>
                        <a href="#" class="button gray" data-bind="click: cancelAttachActivity">@("Cancel".Localize())</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /ko -->
</div>

@Html.Partial("_ConditionsEditor")

<script>
    $(function () {

        var commerceName = '@(Request["commerceName"])';
        var eventType = '@Html.Raw(ViewBag.CurrentEventType)';

        var vm = new ViewModel();

        ConditionsEditor.init({
            contextModelTypeName: eventType,
            save: function (exp) {
                vm.ruleContext().accept(exp);
            }
        });

        function RuleContext(vm, currentRule) {
            var _this = this;
            var _currentRule = currentRule;
            var _vm = vm;

            this.currentRule = function () {
                return _currentRule;
            }

            this.accept = function (exp) {
                var task = null;

                if (_currentRule) {
                    task = _vm.updateConditions(_currentRule, exp);
                } else {
                    task = _vm.createRule(exp);
                }

                task.then(function () {
                    ConditionsEditor.close();
                    _vm.completeRuleContext();
                });
            }

            this.cancel = function () {
                ConditionsEditor.close();
                _vm.completeRuleContext();
            }
        }

        function ActivityContext(vm, currentActivity) {
            var _this = this;
            var _currentActivity = currentActivity;
            var _currentActivityId = currentActivity ? currentActivity.id() : null;
            var _vm = vm;

            this.currentActivity = function () {
                return _currentActivity;
            }

            this.accept = function () {
                var rule = _vm.ruleContext().currentRule();

                _this.refresh()
                     .then(function () {
                         rule.isAttachingActivity(false);
                         _this.closeDialog();
                         _vm.completeActivityContext();
                     });
            }

            this.refresh = function (newAttachedActivityId) {
                if (newAttachedActivityId) {
                    _currentActivityId = newAttachedActivityId;
                }

                var rule = _vm.ruleContext().currentRule();
                var ruleId = rule.id();
                var activityId = _currentActivityId;

                return $.get('@Url.Action("GetAttachedActivity")', { ruleId: ruleId, attachedActivityId: activityId, commerceName: commerceName })
                        .then(function (data) {
                            if (!_currentActivity) {
                                _currentActivity = ko.mapping.fromJS(data);
                                rule.attachedActivities.push(_currentActivity);
                             } else {
                                ko.mapping.fromJS(data, {}, _currentActivity);
                             }
                        });
            }

            this.closeDialog = function () {
                var pop = $.popContext.getCurrent();
                if (pop) {
                    pop.close();
                }
            }

            this.cancel = function () {
                _vm.ruleContext().currentRule().isAttachingActivity(false);
                _this.closeDialog();
                _vm.completeActivityContext();
            }
        }

        function ActivityRuleViewModel() {
            var _this = this;

            this.isAttachingActivity = ko.observable(false);

            this.currentAttachedActivity = null;

            this.selectedActivityName = ko.observable();

            this.beginAttachActivity = function () {
                vm.beginActivityContext(_this, null);
                _this.isAttachingActivity(true);
            }

            this.cancelAttachActivity = function () {
                _this.isAttachingActivity(false);
                _this.selectedActivityName(null);
                vm.completeRuleContext();
            }

            this.openAttachDialog = function () {
                $.pop({
                    height: 500,
                    url: '@Url.Action("Create")' + '?commerceName=' + commerceName + '&ruleId=' + _this.id() + '&activityName=' + _this.selectedActivityName()
                });
            }

            this.editAttachedActivity = function (attachedActivity) {
                vm.beginActivityContext(_this, attachedActivity);
                $.pop({
                    height: 500,
                    url: '@Url.Action("Edit")' + '?commerceName=' + commerceName + '&ruleId=' + _this.id() + '&attachedActivityId=' + attachedActivity.id()
                });
            }

            this.configureAttachedActivity = function (attachedActivity) {
                vm.beginActivityContext(_this, attachedActivity);
                $.pop({
                    height: 500,
                    url: attachedActivity.configUrl()
                });
            }

            this.detachActivity = function (attachedActivity) {
                if (!confirm('@("Are you sure to detach this activity?".Localize())')) {
                    return false;
                }

                $.post('@Url.Action("DetachActivity")', { ruleId: _this.id(), attachedActivityId: attachedActivity.id(), commerceName: commerceName })
                 .then(function (result) {
                     if (result.Success) {
                         _this.attachedActivities.remove(attachedActivity);
                     } else {
                         window.info.show(result.Messages.join('<br/>'), false);
                     }
                 });
            }
        }

        function ViewModel() {
            var _this = this;
            var _ruleContext = null;
            var _activityContext = null;

            this.rules = ko.observableArray();

            this.availableActivities = ko.observableArray();

            this.ruleContext = function () {
                return _ruleContext;
            }

            this.activityContext = function () {
                return _activityContext;
            }

            this.beginRuleContext = function (editedRule) {
                _ruleContext = new RuleContext(_this, editedRule);
            }

            this.completeRuleContext = function () {
                _ruleContext = null;
            }

            this.beginActivityContext = function (rule, activity) {
                _this.beginRuleContext(rule);
                _activityContext = new ActivityContext(_this, activity);
            }

            this.completeActivityContext = function () {
                _activityContext = null;
                _this.completeRuleContext();
            }

            this.addRule = function (name) {
                _this.beginRuleContext(null);
                ConditionsEditor.reset();
                ConditionsEditor.open();
            }

            this.editRule = function (rule) {
                _this.beginRuleContext(rule);
                ConditionsEditor.open({
                    conditionsExpression: rule.conditionsExpression()
                });
            }

            this.updateConditions = function (rule, expression) {
                return $.post('@Url.Action("UpdateConditions")', { ruleId: rule.id(), expression: expression, commerceName: commerceName })
                        .then(function (data) {
                            rule.conditionsExpression(data.conditionsExpression);
                            rule.highlightedConditionsExpression(data.highlightedConditionsExpression);
                        });
            }

            this.createRule = function (expression) {
                return $.post('@Url.Action("CreateRule")', { expression: expression, eventType: eventType, commerceName: commerceName })
                        .success(function (data) {
                            _this.rules.splice(_this.rules().length - 1, 0, _this.createRuleViewModel(data));
                        });
            }

            this.deleteRule = function (rule) {
                if (!confirm('@("Are you sure to delete this rule?".Localize())')) {
                    return false;
                }

                $.post('@Url.Action("DeleteRule")', { ruleId: rule.id(), commerceName: commerceName })
                 .then(function () {
                     _this.rules.remove(rule);
                 });
            }

            this.findRuleById = function (id) {
                return _.find(_this.rules(), function (rule) {
                    return rule.id() == id;
                });
            }

            this.createRuleViewModel = function (data) {
                return ko.mapping.fromJS(data, {}, new ActivityRuleViewModel());
            }
        }

        var loadAvailableActivitiesAsync = $.get('@Url.Action("GetAvailableActivities")', { eventType: eventType, commerceName: commerceName })
                                            .then(function (data) {
                                                $.each(data, function () {
                                                    vm.availableActivities.push(ko.mapping.fromJS(this));
                                                });
                                            });

        var loadRulesAsync = $.get('@Url.Action("GetRules")', { eventType: eventType, commerceName: commerceName })
                              .then(function (rules) {
                                  $.each(rules, function () {
                                      vm.rules.push(vm.createRuleViewModel(this));
                                  });
                              });

        setTimeout(function () {
            window.loading.show();

            $.when(loadAvailableActivitiesAsync, loadRulesAsync)
             .then(function () {
                 ko.applyBindings(vm, document.getElementById('rules-container'));
                 window.loading.hide();
             });
        }, 100);

        window.ViewModel = vm;
    });

</script>