@model PromotionEditorModel

@using (Html.BeginForm("BasicInfo", "Promotion", RouteValues.From(Request.QueryString)))
{
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.PromotionPolicy)
    <div class="common-form">
        <table>
            @Html.EditorFor(m => m.Name)
            @Html.EditorFor(m => m.StartTime)
            @Html.EditorFor(m => m.EndTime)
            @Html.EditorFor(m => m.RequireCouponCode)
            <tr class="J_CouponcodeHolder hide">
                <th></th>
                <td>
                    @Html.TextBoxFor(m => m.CouponCode, new { @class = "medium", placeholder = @Html.DisplayNameFor(m => m.CouponCode) })
                    @Html.ValidationMessageFor(m => m.CouponCode)
                </td>
            </tr>
            <tr>
                <th>@("Conditions".Localize())</th>
                <td>
                    <span class="conditions-expression">
                        @Html.Raw(Model.ConditionsExpression)
                    </span>
                    @Html.HiddenFor(m => m.ConditionsExpression)
                    <a href="#" class="btn-edit-conditions">@Html.IconImage("edit-small")</a>
                </td>
            </tr>
            @Html.EditorFor(m => m.Priority, new { HtmlAttributes = new { @class = "medium" } })
            <tr>
                <th>@Html.DisplayNameFor(m => m.OverlappingUsage)</th>
                <td>
                    <div class="clearfix">
                        @Html.DropDownListFor(m => m.OverlappingUsage, Model.AvailableOverlappingUsages, new { @class = "medium" })
                    </div>
                    @Html.Partial("_SelectOverlappablePromotions", Model.OtherPromotions)
                </td>
            </tr>
            <tr>
                <th>@("Custom Fields".Localize())</th>
                <td>
                    @Html.Partial("_SimpleCustomFields", Model.CustomFields)
                </td>
            </tr>
        </table>
    </div>
}

@Html.Partial("_ConditionsEditor")

<script>
    $(function () {

        var commerceName = '@(Request.QueryString["commerceName"])';
        // Coupon code
        var $requireCoupon = $(':checkbox[name="RequireCouponCode"]');

        onRequireCouponCodeChanged($requireCoupon.is(':checked'));

        $requireCoupon.click(function () {
            onRequireCouponCodeChanged($(this).is(':checked'));
        });

        function onRequireCouponCodeChanged(required) {
            if (required) {
                $('.J_CouponcodeHolder').show();
            } else {
                $('.J_CouponcodeHolder').hide();
            }
        }

        // Overlapping Usage Dropdown

        var $overlappingUsage = $('select[name="OverlappingUsage"]');

        onOverlappingUsageChanged($overlappingUsage.val());

        $overlappingUsage.change(function () {
            onOverlappingUsageChanged($(this).val());
        });

        function onOverlappingUsageChanged(value) {
            if (value == 'AllowedWithSpecifiedPromotions') {
                $('#J_OtherPromotions').show();
            } else {
                $('#J_OtherPromotions').hide();
            }
        }

        // Conditions Editing
        var contextModelType = '@Html.Raw(typeof(Kooboo.Commerce.Promotions.PromotionConditionContextModel).AssemblyQualifiedNameWithoutVersion())';

        ConditionsEditor.init({
            contextModelTypeName: contextModelType,
            save: function (exp) {
                $(':hidden[name="ConditionsExpression"]').val(exp);
                $('.conditions-expression').html(exp);
                ConditionsEditor.close();

                $.get('@Url.Action("PrettifyConditionsExpression", "Condition")', {
                    expression: exp,
                    contextModelType: contextModelType,
                    commerceName: commerceName
                })
                .done(function (html) {
                    $('.conditions-expression').html(html);
                });
            }
        });

        $('.btn-edit-conditions').on('click', function () {
            var expression = $(':hidden[name="ConditionsExpression"]').val();
            ConditionsEditor.open({
                expression: expression
            });
            return false;
        });
    });
</script>