@model PromotionConditionsModel
@{
    Layout = "~/Views/Shared/Blank.cshtml";
    ViewBag.Title = "Promotion Conditions".Localize();
}

@section Panel {
    @Html.HeaderPanel().Buttons(buttons => buttons.AddCancelButton())
}

<div class="block">
    @Html.Action("Steps", "Promotion", new { area = "Commerce", step = 2 })
    <div class="data-fluid common-form" id="conditions-main">
        <p style="margin-bottom:20px">
            @("This promotion is available for customers who fullfill all of following conditions.".Localize())
            <br />
            @("If no condition is defined, then this promotion is available for all customers.".Localize())
        </p>
        <div data-bind="visible: addedConditions().length > 0">
            <ul data-bind="foreach: addedConditions" class="category-list" style="float:none">
                <li class="category-item-data">
                    <a href="#" data-bind="html: description, click: $root.editCondition"></a>
                    <a class="remove right" href="#" data-bind="click: $root.removeCondition">
                        @Html.IconImage("minus small")
                    </a>
                </li>
            </ul>
        </div>
        <div class="data-command">
            <p>
                @("Available conditions".Localize()):
            </p>
            <select name="ConditionName" class="medium" style="vertical-align:middle" data-bind="options: availableConditions, optionsText: 'displayName', optionsValue: 'name', value: selectedConditionName"></select>
            <a class="action" style="vertical-align:middle" data-bind="click: addCondition">@Html.IconImage("plus")</a>
        </div>
    </div>
    <div class="buttons clearfix" style="margin-top:20px">
        <a class="button gray" href="@Url.Action("Edit", RouteValues.From(Request.QueryString).Merge("id", Model.PromotionId))">Back</a>
        <a href="@Url.Action("Policy", ViewContext.RequestContext.AllRouteValues().Merge("promotionId", Model.PromotionId))" class="button">@("Next".Localize())</a>
    </div>
</div>

<script>
    $(function () {

        var jsViewModel = @Html.Raw(Model.ToJson(PropertyNaming.CamelCase));

        var commerceName = '@(ViewContext.RequestContext.GetRequestValue("commerceName"))';
        var promotionId = @Model.PromotionId;
        var ns = kb.registerNamespace('kb.commerce.promotions');

        var ConditionsViewModel = function () {
            var _this = this;

            this.refreshConditions = function () {
                $.get('@Url.Action("GetConditions")', { commerceName: commerceName, promotionId: promotionId }, function (data) {
                    _this.addedConditions.removeAll();
                    $.each(data, function () {
                        _this.addedConditions.push(ko.mapping.fromJS(this));
                    });
                });
            }

            this.findConditionByName = function (name) {
                return _.find(_this.availableConditions(), function (x) {
                    return x.name() == name;
                });
            }

            this.addCondition = function () {
                var rule = _this.findConditionByName(_this.selectedConditionName());
                var context = new ns.ConditionEditorContext();
                context.promotionId(promotionId);
                context.conditionId(null);

                ns.ConditionEditorContext.current(context);

                if (rule.configurable()){
                    $.pop({
                        id: new Date().getTime(),
                        frameHeight: '100%',
                        height: 500,
                        url: rule.creationUrl(),
                        popupOnTop: true,
                        onclose: function () {
                            ns.ConditionEditorContext.current().cancel();
                        }
                    })
                } else {
                    $.post('@Url.Action("AddCondition")', { commerceName: commerceName, promotionId: promotionId, ruleName: rule.name() }, function () {
                        _this.refreshConditions();
                    });
                }
            }

            this.editCondition = function (condition) {
                if (!condition.configurable()) {
                    return false;
                }

                var context = new ns.ConditionEditorContext();
                context.promotionId(promotionId);
                context.conditionId(condition.id());

                ns.ConditionEditorContext.current(context);

                $.pop({
                    id: new Date().getTime(),
                    frameHeight: '100%',
                    height: 500,
                    url: condition.editorUrl(),
                    popupOnTop: true,
                    onclose: function () {
                        ns.ConditionEditorContext.current().cancel();
                    }
                });
            }

            this.removeCondition = function (condition) {
                $.post('@Url.Action("RemoveCondition")', { commerceName: commerceName, promotionId: promotionId, conditionId: condition.id() }, function () {
                    _this.addedConditions.remove(condition);
                });
            }
        };

        var viewModel = ko.mapping.fromJS(jsViewModel, {}, new ConditionsViewModel());

        ko.applyBindings(viewModel, document.getElementById('conditions-main'));

        // Api for add-in editor views

        ns.ConditionEditorContext = function () {
            var _this = this;
            var _promotionId = null;
            var _conditionId = null;

            this.promotionId = function (value) {
                if (arguments.length === 0) {
                    return _promotionId;
                }
                _promotionId = value;
            }

            this.conditionId = function (value) {
                if (arguments.length === 0) {
                    return _conditionId;
                }
                _conditionId = value;
            }

            this.accept = function () {
                viewModel.refreshConditions();
                $.popContext.getCurrent().close();
            }

            this.cancel = function () {
                $.popContext.getCurrent().close();
            }
        }

        ns.ConditionEditorContext._current = null;
        ns.ConditionEditorContext.current = function (value) {
            if (arguments.length === 0) {
                return kb.commerce.promotions.ConditionEditorContext._current;
            }
            kb.commerce.promotions.ConditionEditorContext._current = value;
        };
    });
</script>