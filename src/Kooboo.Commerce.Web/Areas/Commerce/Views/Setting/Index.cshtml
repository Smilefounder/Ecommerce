@using Newtonsoft.Json
@model SettingsModel
@{
    ViewBag.Title = "Settings".Localize();
    ViewBag.CanAddPredefinedFields = false;
}

@section Panel{
    @(Html.HeaderPanel().Buttons(buttons => 
    {
        buttons.Add("Save", "save").AsAjaxFormTrigger();
    }))
}

@using (Html.BeginForm("Index", "Setting", RouteValues.From(Request.QueryString)))
{
    @Html.ValidationSummary(true)

    <div id="J_SettingTabs">
        <ul>
            <li>
                <a href="#General">@("General".Localize())</a>
            </li>
            <li>
                <a href="#Image">@("Image".Localize())</a>
            </li>
            <li>
                <a href="#PredefinedField">@("Predefined fields".Localize())</a>
            </li>
        </ul>
        <div id="General">
            <div class="common-form">
                <table>
                    @Html.EditorFor(m => m.Global.Currency, new { HtmlAttributes = new { @class = "medium" } })
                    @Html.EditorFor(m => m.Global.WeightUnitName, new { HtmlAttributes = new { @class = "medium" } })
                    @Html.EditorFor(m => m.Global.SizeUnitName, new { HtmlAttributes = new { @class = "medium" } })
                </table>
            </div>
        </div>
        <div id="Image">
            <div class="common-form" id="image-settings">
                <div data-bind="foreach: { data: Sizes, afterRender: UpdateValidation }">
                    <div class="form-row">
                        <div class="span2">
                            <input type="text"
                                   data-val="true"
                                   data-val-required="@("Name is required".Localize())"
                                   data-val-distinctsizename="@("Name is duplicated".Localize())"
                                   data-bind="attr:{ name: 'Global.Image.Sizes[' + $index() + '].Name' }, value: Name">
                        </div>
                        <div class="span2">
                            <input type="text" defaultvalue="0"
                                   data-val="true"
                                   data-val-required="@("Width is required".Localize())"
                                   data-val-digits="@("Width should be an integer".Localize())"
                                   data-bind="attr:{ name: 'Global.Image.Sizes[' + $index() + '].Width' }, value:Width" class="mini">
                            <span class="text">x</span>
                            <input type="text" defaultvalue="0"
                                   data-val="true"
                                   data-val-required="@("Height is required".Localize())"
                                   data-val-digits="@("Height should be an integer".Localize())"
                                   data-bind="attr:{ name: 'Global.Image.Sizes[' + $index() + '].Height' }, value:Height" class="mini">
                        </div>
                        <div class="span2">
                            <div class="checkbox-field">
                                <input type="checkbox" value="true"
                                       data-bind="attr:{ name: 'Global.Image.Sizes[' + $index() + '].IsMultiple', id: 'Image_Sizes_' + $index() + '_IsMultiple' }, checked:IsMultiple" />
                                <label class="inline" data-bind="attr:{'for': 'Image_Sizes_' + $index() + '_IsMultiple' }">@("IsMultiple".Localize())</label>
                            </div>
                        </div>
                        <div class="span2">
                            <a class="action" data-bind="click:$parent.RemoveImageSize">@Html.IconImage("minus")</a>
                        </div>
                    </div>
                    <div>
                        <div data-valmsg-replace="true" data-bind="attr:{'data-valmsg-for': 'Global.Image.Sizes[' + $index() + '].Name' }"></div>
                        <div data-valmsg-replace="true" data-bind="attr:{'data-valmsg-for': 'Global.Image.Sizes[' + $index() + '].Width' }"></div>
                        <div data-valmsg-replace="true" data-bind="attr:{'data-valmsg-for': 'Global.Image.Sizes[' + $index() + '].Height' }"></div>
                    </div>
                </div>
                <div>
                    <a class="action" data-bind="click: AddImageSize">@Html.IconImage("plus")</a>
                </div>
                <script>
                    (function ($) {

                        var data = @Html.Raw(Model.Global.Image.ToJson());

                        var ImageSettingsModel = function () {
                            var self = this;

                            this.AddImageSize = function () {
                                var size = {
                                    Name: ko.observable(),
                                    Width: ko.observable(),
                                    Height: ko.observable(),
                                    IsEnabled: ko.observable(true),
                                    IsMultiple: ko.observable(false)
                                };
                                self.Sizes.push(size);
                            };

                            this.RemoveImageSize = function (size) {
                                self.Sizes.remove(size);
                            };

                            this.UpdateValidation = function () {
                                var $form = $('#image-settings').parents('form');
                                $.validator.unobtrusive.reparse($form);
                            }
                        };

                        // validate
                        $.validator.addMethod('distinctsizename', function (value, element, param) {
                            var set = {};
                            var duplicate = false;

                            $.each(model.Sizes(), function () {
                                var name = (this.Name() || '').toLowerCase();
                                if (set[name]) {
                                    duplicate = true;
                                    return false;
                                } else {
                                    set[name] = true;
                                }
                            });

                            return !duplicate;
                        });
                        $.validator.unobtrusive.adapters.add('distinctsizename', ['value'], function (options) {
                            options.rules['distinctsizename'] = options.params;
                            options.messages['distinctsizename'] = options.message;
                        });

                        var model = ko.mapping.fromJS(data, {}, new ImageSettingsModel());
                        // apply
                        ko.applyBindings(model, document.getElementById('image-settings'));

                    })(jQuery);
                </script>
            </div>
        </div>
        <div id="PredefinedField">
            <div id="predefined-fields-holder">
                @Html.Partial("_CustomFieldGrid")
            </div>
        </div>
    </div>
    <script type="text/javascript">
        $(function () {
            $('#J_SettingTabs').tabs();
        });
    </script>
}

@Html.Partial("_CustomFieldGrid.Scripts")

<script>
    $(function () {

        new CustomFieldGrid('#predefined-fields-holder').load({
            htmlPrefix: 'PredefinedFields',
            canEditPredefinedFields: true,
            fieldDefaults: { IsPredefined: true },
            fields: @Html.Raw(JsonConvert.SerializeObject(Model.PredefinedFields))
        });

    });
</script>