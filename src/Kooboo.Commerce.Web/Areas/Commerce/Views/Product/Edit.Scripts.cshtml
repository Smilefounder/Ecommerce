@using Newtonsoft.Json
@using Kooboo.Commerce.Settings
@{
    var productType = ViewBag.ProductType as ProductType;
    var imageTypes = ViewBag.ImageTypes as IEnumerable<ImageType>;
}
@Html.Partial("_ChangePriceDialog")
@Html.Partial("_BulkAddDialog")

<script>
    $(function () {
        $('#J_ProductTabs').tabs({
            beforeActivate: function (event, ui) {
                if (ui.oldPanel) {
                    var valid = true;
                    ui.oldPanel.find('form').each(function () {
                        if (!$(this).valid()) {
                            valid = false;
                        }
                    });

                    return valid;
                }
            }
        });

        var productId = @(Request.QueryString["Id"] ?? "0");
        var productTypeId = @(productType.Id);

        var AppViewModel = function () {
            var self = this;

            self.productTypeId = productTypeId;

            self.product = {};

            self.submit = function (publish) {

                if (tinyMCE) {
                    tinyMCE.triggerSave();
                    $('[data-toggle="tinymce"]').trigger('change');
                }

                var valid = true;
                $('#product-edit-main').find('form').each(function () {
                    if (!$(this).valid()) {
                        valid = false;
                    }
                });

                if (!valid) {
                    return false;
                }

                // Notify submitting
                for (var name in window.ProductEditor.tabs) {
                    var tab = window.ProductEditor.tabs[name];
                    if (tab.onSubmitting) {
                        tab.onSubmitting({ model: self });
                    }
                }

                var model = ko.mapping.toJS(self.product);
                model.isPublished = publish;

                $.ajax({
                    url: '@Url.Action("Save")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(model)
                })
                .done(function () {
                    window.leaveConfirm.pass();
                    location.href = '@Html.Raw(ViewContext.RequestContext.GetRequestValue("return"))';
                })
                .fail(function (xhr) {
                    var result = JSON.parse(xhr.responseText);
                    info.show(result.message, false);
                });
            }
        }

        var viewModel = new AppViewModel();

        window.viewModel = viewModel;

        $.get('@Url.Action("Get")', { id: productId, productTypeId: productTypeId })
         .done(function (data) {
             ko.mapping.fromJS(data, {}, viewModel.product);

             // Tabs init
             forEachTab(function (tab) {
                 if (tab.init) {
                     tab.init({
                         model: viewModel
                     })
                 }
             });
 
             // Data binding
             ko.applyBindings(viewModel, document.getElementById('product-edit-main'));
             
             // Tabs onDataBound
             forEachTab(function (tab) {
                 if (tab.onDataBound) {
                     tab.onDataBound({
                         model: viewModel
                     });
                 }
             });

             kb.ui.unobtrusive.initialize(document.body);

             $('#product-edit-main form').each(function () {
                 $.validator.unobtrusive.reparse(this);
             });

         });

        function forEachTab(action) {
            for (var name in ProductEditor.tabs) {
                var tab = ProductEditor.tabs[name];
                action(tab);
            }
        }
    });

</script>
