@using Kooboo.Commerce.Settings
@{
    var imageTypes = ViewBag.ImageTypes as IEnumerable<ImageType>;
}

<div class="common-form">
    <table>
        <tbody>
            @foreach (var type in imageTypes)
            {
                <tr>
                    <th>
                        @type.Name<br />(@type.Width X @type.Height)
                    </th>
                    <td>
                        <ul class="form-list images" data-bind="foreach: $root.getImages('@type.Name')">
                            <li>
                                <div class="file-thumbnail">
                                    <img class="crop_image" style="max-height:100px"
                                         data-instance="@(Request.QueryString["instance"])"
                                         data-width="@type.Width" data-height="@type.Height"
                                         data-bind="attr: { src: imageUrl }" />
                                    <a href="#" class="action" data-bind="click: $root.removeImage">@Html.IconImage("minus-small")</a>
                                </div>
                            </li>
                        </ul>
                        <a href="#" class="action J_Upload"
                            data-id="@(type.Name)"
                            data-imgtype="@(type.Name)"
                            data-instance="@(Request.QueryString["instance"])"
                            data-path="Products/@type.Name" 
                            data-multiple="@(type.AllowMultiple ? "true" : "false")">@Html.IconImage("plus-small")</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>

    (function () {
        var ImageTypes = @Html.Raw(JsonEncoder.Encode(imageTypes, true));

        window.ProductEditor.tabs['Images'] = {
            init: function (context) {
                var model = context.model;
                var cropImageDialog = new CropImageDialog();

                // Extend model
                model.getImages = function (type) {
                    return _.filter(model.product.images(), function (image) {
                        return image.type() === type;
                    });
                }

                model.addImage = function (type, url) {
                    var image = {
                        id: ko.observable(),
                        type: ko.observable(type),
                        imageUrl: ko.observable(url)
                    };
                    model.product.images.push(image);
                    return image;
                }

                model.removeImage = function (image) {
                    model.product.images.remove(image);
                }

                // Init uploaders
                $('.J_Upload').upload({
                    on_file_select: function (data) {
                        var parts = data.path.split('/');
                        var file = data.files[0];
                        var imageTypeName = $(data.element).data('imgtype');
                        var imageType = getImageType(imageTypeName);

                        cropImageDialog.open({
                            url: file.Url,
                            width: imageType.width,
                            height: imageType.height,
                            onCropped: function (data) {
                                var imageUrl = data.url + '?v=' + new Date().getTime();
                                model.addImage(imageTypeName, imageUrl);
                            }
                        });
                    }
                });

                function getImageType(name) {
                    return _.find(ImageTypes, function (t) {
                        return t.name === name;
                    });
                }
            }
        };
    })();
</script>