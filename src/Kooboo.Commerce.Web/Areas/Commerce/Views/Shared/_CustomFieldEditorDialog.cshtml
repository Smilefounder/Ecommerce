@using Newtonsoft.Json
@using Kooboo.Commerce.Web.Framework.UI.Form
@using Kooboo.Commerce.Web.Framework.UI.Form.Validation

<div class="hide">
    <div id="customfield-editor-dialog">
        <div class="topbar">
            <h1 class="title">@("Custom field".Localize())</h1>
        </div>
        <div class="wrap">
            <form class="common-form">
                <div class="tabs">
                    <ul class="tab-index clearfix">
                        <li><a class="active" href="#basic">@("Basic".Localize())</a></li>
                        <li><a href="#validation">@("Validation".Localize())</a></li>
                        <li data-bind="visible: IsSelectedControlTypeSelectionList"><a href="#selectionitems">@("Selection value".Localize())</a></li>
                    </ul>
                    <div class="tab-content active" id="basic">
                        <table>
                            <tr>
                                <th>@("Name".Localize())</th>
                                <td>
                                    <input type="text" name="Name" class="medium" maxlength="50"
                                           data-bind="value: Name, disable: Id() > 0"
                                           data-val="true"
                                           data-val-required="@("Required".Localize())" />
                                    <span data-valmsg-for="Name" data-valmsg-replace="true"></span>
                                </td>
                            </tr>
                            <tr>
                                <th>@("Label".Localize())</th>
                                <td>
                                    <input type="text" name="Label" class="medium" maxlength="50"
                                           data-bind="value: Label"
                                           data-val="true"
                                           data-val-required="@("Required".Localize())" />
                                    <span data-valmsg-for="Label" data-valmsg-replace="true"></span>
                                </td>
                            </tr>
                            <tr>
                                <th>@("Tooltip".Localize())</th>
                                <td>
                                    <input type="text" name="Tooltip" class="medium" maxlength="500" data-bind="value: Tooltip" />
                                </td>
                            </tr>
                            <tr>
                                <th>@("Control type".Localize())</th>
                                <td>
                                    <select class="medium" data-bind="options: ControlTypes, optionsText: 'Name', optionsValue: 'Name', value: ControlType"></select>
                                </td>
                            </tr>
                            <tr>
                                <th>@("Default value".Localize())</th>
                                <td>
                                    <input type="text" name="DefaultValue" maxlength="500" class="medium" data-bind="value: DefaultValue" />
                                </td>
                            </tr>
                            <tr>
                                <th></th>
                                <td>
                                    <input type="checkbox" id="IsValueLocalizable" name="IsValueLocalizable" data-bind="checked: IsValueLocalizable" />
                                    <label class="inline" for="IsValueLocalizable">@("Is value localizable".Localize())</label>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="tab-content" id="validation">
                        <div class="form-row">
                            <div class="span4">
                                <select data-bind="options: Validators, optionsText: 'Name', optionsValue: 'Name', value: SelectedValidatorName, visible: Validators().length > 0"></select>
                            </div>
                            <div class="span8">
                                <a href="javascript:;" class="action" data-bind="click: AddValidationRule, visible: Validators().length > 0">@Html.IconImage("plus")</a>
                            </div>
                        </div>
                        <table>
                            <tbody data-bind="foreach: { data: ValidationRules, as: 'rule', afterRender: UpdateValidation }">
                                <tr class="border">
                                    <td colspan="3"></td>
                                </tr>
                                <tr>
                                    <td>
                                        <label>@("Validation type".Localize())</label>
                                    </td>
                                    <td data-bind="text: rule.ValidatorName"></td>
                                    <td style="width: 26px;">
                                        <a title="Remove" class="action" href="javascript:;" data-bind="click: $root.RemoveValidationRule">@Html.IconImage("minus")</a>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <label>@("Error message".Localize())</label>
                                    </td>
                                    <td colspan="2">
                                        <input type="text" class="medium" name="error-message"
                                               data-bind="value: rule.ErrorMessage">
                                        <span class="field-validation-valid" data-valmsg-for="error-message" data-valmsg-replace="true"></span>
                                    </td>
                                </tr>

                                <!-- ko if: rule.ValidatorName() =='StringLength' -->
                                <tr>
                                    <td>
                                        <label>@("Min length".Localize())</label>
                                    </td>
                                    <td colspan="2">
                                        <input type="text" name="min-length" class="medium"
                                               data-val="true"
                                               data-val-required="@("Required".Localize())"
                                               data-val-number="@("Must be a number".Localize())"
                                               data-value-type="int32"
                                               data-bind="value: rule.ValidatorConfigModel.MinLength">
                                        <span class="field-validation-valid"
                                              data-valmsg-for="min-length"
                                              data-valmsg-replace="true"></span>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <label>@("Max length".Localize())</label>
                                    </td>
                                    <td colspan="2">
                                        <input type="text" name="max-length" class="medium"
                                               data-val="true"
                                               data-val-required="@("Required".Localize())"
                                               data-val-number="@("Must be a number".Localize())"
                                               data-bind="value: rule.ValidatorConfigModel.MaxLength">
                                        <span class="field-validation-valid"
                                              data-valmsg-for="max-length"
                                              data-valmsg-replace="true"></span>

                                    </td>
                                </tr>
                                <!-- /ko -->
                                <!-- ko if: rule.ValidatorName()=='Range' -->
                                <tr>
                                    <td>
                                        <label>@("Min value".Localize())</label>
                                    </td>
                                    <td colspan="2">
                                        <input type="text" name="range-start" class="medium"
                                               data-val="true"
                                               data-val-required="@("Required".Localize())"
                                               data-val-number="@("Must be a number".Localize())"
                                               data-bind="value: rule.ValidatorConfigModel.MinValue">
                                        <span class="field-validation-valid"
                                              data-valmsg-for="range-start"
                                              data-valmsg-replace="true"></span>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <label>@("Max value".Localize())</label>
                                    </td>
                                    <td colspan="2">
                                        <input type="text" name="range-end" class="medium"
                                               data-val="true"
                                               data-val-required="@("Required".Localize())"
                                               data-val-number="@("Must be a number".Localize())"
                                               data-bind="value: rule.ValidatorConfigModel.MaxValue">
                                        <span class="field-validation-valid"
                                              data-valmsg-for="range-end"
                                              data-valmsg-replace="true"></span>

                                    </td>
                                </tr>
                                <!-- /ko -->
                                <!-- ko if: rule.ValidatorName()=='Regex' -->
                                <tr>
                                    <td>
                                        <label>@("Pattern".Localize())</label>
                                    </td>
                                    <td colspan="2">
                                        <input type="text" class="medium" data-bind="value: rule.ValidatorConfigModel.Pattern">
                                    </td>
                                </tr>
                                <!-- /ko -->
                            </tbody>
                        </table>
                    </div>
                    <div class="tab-content" id="selectionitems">
                        <table class="key-value clear">
                            <thead data-bind="visible: SelectionItems().length>0">
                                <tr>
                                    <th><label class="short">@("Text".Localize())</label></th>
                                    <th><label class="short">@("Value".Localize())</label></th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody data-bind="foreach: SelectionItems">
                                <tr>
                                    <td>
                                        <input type="text" class="short" data-bind="value:Text" />
                                    </td>
                                    <td>
                                        <input type="text" class="short" data-bind="value:Value" />
                                    </td>
                                    <td>
                                        <a href="#" class="form-action" data-bind="click: $root.RemoveSelectionItem">@Html.IconImage("minus")</a>
                                    </td>
                                </tr>
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3">
                                        <a href="#" class="form-action" data-bind="click: $root.AddSelectionItem">@Html.IconImage("plus")</a>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
                <p class="buttons">
                    <input type="button" class="button" data-toggle="submit-dialog" value="@("Save".Localize())">
                    <a class="button gray" data-toggle="close-dialog">@("Cancel".Localize())</a>
                </p>
            </form>
        </div>
    </div>
</div>

<script>
    (function ($) {

        var defaultModel = @(Html.Raw(JsonConvert.SerializeObject(new CustomFieldDefinition())));
        var defaultValidatorConfigs = {
            'Required': {},
            'StringLength': @(Html.Raw(JsonConvert.SerializeObject(new StringLengthValidatorConfig()))),
            'Range': @(Html.Raw(JsonConvert.SerializeObject(new RangeValidatorConfig()))),
            'Regex': @(Html.Raw(JsonConvert.SerializeObject(new RegexValidatorConfig()))),
            'Unique': {}
        };

        var Validators = @Html.Raw(JsonConvert.SerializeObject(ControlValidators.Validators().Select(v => new { v.Name })));
        var ControlTypes = @Html.Raw(JsonConvert.SerializeObject(FormControls.Controls().Select(c => new { c.Name, c.IsSelectionList })));

        var mappingOptions = {
            ValidationRules: {
                create: function (args) {
                    args.data.ValidatorConfig = args.data.ValidatorConfig || {};
                    args.data.ValidatorConfigModel = JSON.parse(args.data.ValidatorConfig);
                    return ko.mapping.fromJS(args.data);
                }
            }
        };

        var CustomFieldEditorModel = function () {
            var self = this;

            self.Validators = ko.mapping.fromJS(Validators);

            self.ControlTypes = ko.mapping.fromJS(ControlTypes);

            self.Name = ko.observable();

            self.Label = ko.observable();

            self.ControlType = ko.observable('TextBox');

            self.SelectedValidatorName = ko.observable();

            self.SelectionItems = ko.observableArray();

            self.AddValidationRule = function () {
                var validatorName = self.SelectedValidatorName();
                var rule = {
                    Id: ko.observable(0),
                    ErrorMessage: ko.observable(),
                    ValidatorName: ko.observable(validatorName),
                    ValidatorConfig: ko.observable(),
                    ValidatorConfigModel: ko.mapping.fromJS(defaultValidatorConfigs[validatorName])
                };

                self.ValidationRules.push(rule);
            };

            self.RemoveValidationRule = function (item) {
                self.ValidationRules.remove(item);
            };

            self.IsSelectedControlTypeSelectionList = ko.computed(function () {
                var name = self.ControlType();
                if (!name) {
                    return false;
                }

                var controlType = _.find(self.ControlTypes(), function (type) {
                    return name == type.Name();
                });

                return controlType && controlType.IsSelectionList();
            });

            self.AddSelectionItem = function () {
                self.SelectionItems.push({
                    Text: ko.observable(),
                    Value: ko.observable()
                });
            }

            self.RemoveSelectionItem = function (item) {
                self.SelectionItems.remove(item);
            }

            self.UpdateValidation = function () {
                window.CustomFieldEditorDialog.instance().initValidation();
            }

            self.Name.subscribe(function (name) {
                var label = self.Label();
                if (label === null || label === undefined || label === '') {
                    self.Label(name);
                }
            });
        };

        window.CustomFieldEditorDialog = function () {
            var self = this;
            var $dialog = null;
            var model = ko.mapping.fromJS(defaultModel, mappingOptions, new CustomFieldEditorModel());

            self.model = function () {
                var result = ko.mapping.toJS(model);

                $.each(result.ValidationRules, function () {
                    if (this.ValidatorConfigModel) {
                        this.ValidatorConfig = JSON.stringify(this.ValidatorConfigModel);
                    }
                });

                return result;
            }

            self.onSubmitted = null;

            self.open = function (options) {
                options = options || {};

                if ($dialog === null) {
                    $dialog = $('#customfield-editor-dialog').dialog({
                        autoOpen: false,
                        modal: true
                    });

                    $dialog.find('.tabs').tabs();

                    $dialog.on('click', '[data-toggle="submit-dialog"]', self.submit);
                    $dialog.on('click', '[data-toggle="close-dialog"]', self.close);

                    ko.applyBindings(model, $dialog.find('form')[0]);

                    $(document).dialogScroll();
                }

                $dialog.find('.tabs').tabs('option', 'active', 0);

                if (options.model) {
                    var data = $.extend({}, defaultModel, options.model);
                    ko.mapping.fromJS(data, mappingOptions, model);
                } else {
                    // reset
                    ko.mapping.fromJS(defaultModel, mappingOptions, model);
                }

                $dialog.dialog('open');
            }

            self.validate = function () {
                return $dialog.find('form').valid();
            }

            self.initValidation = function () {
                $.validator.unobtrusive.reparse($dialog.find('form'));
            }

            self.submit = function () {
                $dialog.find(':focus').blur();

                if (!self.validate()) {
                    return false;
                }

                if (self.onSubmitted) {
                    self.onSubmitted.apply(self, [self.model()]);
                }

                self.close();
            }

            self.close = function () {
                $dialog.dialog('close');
            }
        }

        var instance = new window.CustomFieldEditorDialog();

        window.CustomFieldEditorDialog.instance = function () {
            return instance;
        }

    })(jQuery);
</script>