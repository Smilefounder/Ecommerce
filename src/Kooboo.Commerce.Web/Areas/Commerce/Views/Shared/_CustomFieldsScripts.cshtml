
<div style="display: none;">
    <div id="custom_field_editor_dialog">
        @Html.Partial("_CustomFieldEditor", new CustomFieldEditorModel())
    </div>
    <script type="text/template" id="custom_field_row_template">
        <tr data-bind="jqData:$data">
            <td class="nocheckbox draggable">
                <div>@Html.IconImage("drag")</div>
                <!--ko if:!!$parent.nameFmt()-->
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'Id')}, value:Id" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'Name')}, value:Name" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'DataType')}, value:DataType" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'Label')}, value:Label" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'Tooltip')}, value:Tooltip" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'ControlType')}, value:ControlType" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'DefaultValue')}, value:DefaultValue" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'Length')}, value:Length" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'Sequence')}, value:Sequence" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'Modifiable')}, value:(Modifiable()+'')" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'Indexable')}, value:(Indexable()+'')" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'AllowNull')}, value:(AllowNull()+'')" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'ShowInGrid')}, value:(ShowInGrid()+'')" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'Summarize')}, value:(Summarize()+'')" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'IsEnabled')}, value:(IsEnabled()+'')" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'CustomSettings')}, value:CustomSettings" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtName($index,'SelectionItems')}, value:SelectionItems" />
                <!--ko foreach:ValidationRules-->
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtRuleName($parentContext.$index,$index,'Id')}, value:Id" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtRuleName($parentContext.$index,$index,'ValidatorName')}, value:ValidatorName" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtRuleName($parentContext.$index,$index,'ValidatorData')}, value:ValidatorData" />
                <input type="hidden" name="{ko}" data-bind="attr:{name:$root.fmtRuleName($parentContext.$index,$index,'ErrorMessage')}, value:ErrorMessage" />
                <!--/ko-->
                <!--/ko-->
            </td>
            <td><a class="action" data-bind="text:Name, click:$root.editField"></a></td>
            <td data-bind="text:((Label()==''||Label()==null)?'-':Label)"></td>
            <td data-bind="text:ControlType"></td>
            <td><span data-bind="text:((ShowInGrid()==''||ShowInGrid()==null)?'-':'@("YES".Localize())')"></span></td>
            <td><span data-bind="text: FieldType"></span></td>
            <td data-bind="text:Sequence"></td>
            <td class="action"><a class="action" data-bind="click:$root.removeField">@Html.IconImage("minus-small")</a></td>
        </tr>
    </script>
    <script type="text/javascript">
        var fieldType = '@((ViewData.ContainsKey("FieldType") ? Convert.ToInt32(ViewData["FieldType"]) : 0) == 0 ? "Custom" : "System")';
        (function ($, ko) {
            // override
            $.validator.setDefaults({ ignore: 'input[type="hidden"]' });

            // tools
            var utilities = {
                cloneObject: function (obj) {
                    return ko.mapping.fromJS(ko.toJS(obj));
                },
                copyValue: function (fromObs, toObs) {
                    $.each(fromObs, function (key, val) {
                        if ($.type(val) === 'function' && toObs[key]) {
                            toObs[key](val());
                        } else if (val instanceof keyValuePairArray) {
                            toObs[key].update(val.json());
                        }
                    });
                },
                dialogElem: function () {
                    return $('#custom_field_editor_dialog');
                },
                fieldEditorTabs: function () {
                    return this.dialogElem().find('#custom_field_editor_tabs');
                },
                fieldEditorForm: function () {
                    return $('#custom_field_editor_form');
                },
                showDialog: function (ref, field, exist) {
                    customFieldModel.initialize(ref, field, exist);
                    this.updateFieldEditorValidation();
                    return this.dialogElem().dialog({
                        title: field.Name() || '',
                        autoOpen: false,
                        width: 780,
                        modal: true,
                        draggable: false,
                        resizable: false,
                        create: function () {
                            $(document).dialogScroll();
                        }
                    }).dialog('open');
                },
                updateFieldEditorValidation: function () {
                    this.fieldEditorForm().find('.input-validation-error').removeClass('input-validation-error').addClass('valid');
                    this.fieldEditorForm().find('.field-validation-error').removeClass('field-validation-error').addClass('field-validation-valid').empty();
                    this.fieldEditorForm().removeData('validator').removeData('unobtrusiveValidation');
                    $.validator.unobtrusive.parse(this.fieldEditorForm());
                }
            };

            var keyValuePairArray = function (jsonData, dict) {
                var self = this;
                this.items = ko.observableArray();
                this.items.subscribe(function () {
                    utilities.updateFieldEditorValidation();
                });
                this.add = function () {
                    self.items.push(ko.mapping.fromJS({ Key: '', Value: '' }));
                };
                this.remove = function (item) {
                    self.items.remove(item);
                };
                this.update = function (json) {
                    var arr = [];
                    if (dict) {
                        var obj = $.parseJSON(json || '{}');
                        $.each(obj, function (key, val) {
                            arr.push(ko.mapping.fromJS({ Key: key, Value: val }));
                        });
                    } else {
                        arr = ko.mapping.fromJS($.parseJSON(json || '[]'))();
                    }
                    self.items(arr);
                };
                this.json = function () {
                    if (self.items().length === 0) { return ''; }
                    var arr = [], obj = {}, currents = ko.mapping.toJS(self.items);
                    $.each(currents, function () {
                        if (dict) {
                            if (this.Key) { obj[this.Key] = this.Value; }
                        } else {
                            arr.push(this);
                        }
                    });
                    return $.toJSON(dict ? obj : arr);
                };
                this.update(jsonData);
            };

            //
            var emptyCustomField = $.parseJSON('@Html.Raw(new CustomFieldEditorModel() { ShowInGrid = false, AllowNull = true, Modifiable = true, IsEnabled = true }.ToJson(PropertyNaming.Default))');
            var emptyValidationRules = {};
            emptyValidationRules['@Kooboo.Commerce.EAV.Validation.ValidationType.Required'] = $.parseJSON('@Html.Raw(new FieldValidationRuleEditorModel() { ValidatorName = Kooboo.Commerce.EAV.Validation.ValidationType.Required.ToString() }.ToJson(PropertyNaming.Default))');
            emptyValidationRules['@Kooboo.Commerce.EAV.Validation.ValidationType.Required'].ValidatorData = '@Html.Raw(new { }.ToJson(PropertyNaming.Default))';
            emptyValidationRules['@Kooboo.Commerce.EAV.Validation.ValidationType.Unique'] = $.parseJSON('@Html.Raw(new FieldValidationRuleEditorModel() { ValidatorName = Kooboo.Commerce.EAV.Validation.ValidationType.Unique.ToString() }.ToJson(PropertyNaming.Default))');
            emptyValidationRules['@Kooboo.Commerce.EAV.Validation.ValidationType.Unique'].ValidatorData = '@Html.Raw(new { }.ToJson(PropertyNaming.Default))';
            emptyValidationRules['@Kooboo.Commerce.EAV.Validation.ValidationType.StringLength'] = $.parseJSON('@Html.Raw(new FieldValidationRuleEditorModel() { ValidatorName = Kooboo.Commerce.EAV.Validation.ValidationType.StringLength.ToString() }.ToJson(PropertyNaming.Default))');
            emptyValidationRules['@Kooboo.Commerce.EAV.Validation.ValidationType.StringLength'].ValidatorData = '@Html.Raw(new { Min = 0, Max = 0 }.ToJson(PropertyNaming.Default))';
            emptyValidationRules['@Kooboo.Commerce.EAV.Validation.ValidationType.Range'] = $.parseJSON('@Html.Raw(new FieldValidationRuleEditorModel() { ValidatorName = Kooboo.Commerce.EAV.Validation.ValidationType.Range.ToString() }.ToJson(PropertyNaming.Default))');
            emptyValidationRules['@Kooboo.Commerce.EAV.Validation.ValidationType.Range'].ValidatorData = '@Html.Raw(new { Start = 0, End = 0 }.ToJson(PropertyNaming.Default))';
            emptyValidationRules['@Kooboo.Commerce.EAV.Validation.ValidationType.Regex'] = $.parseJSON('@Html.Raw(new FieldValidationRuleEditorModel() { ValidatorName = Kooboo.Commerce.EAV.Validation.ValidationType.Regex.ToString() }.ToJson(PropertyNaming.Default))');
            emptyValidationRules['@Kooboo.Commerce.EAV.Validation.ValidationType.Regex'].ValidatorData = '@Html.Raw(new { Pattern = string.Empty }.ToJson(PropertyNaming.Default))';

            //
            var fieldsGridModel = function (set) {
                var self = this;
                this.container = null;
                this.nameFmt = ko.observable(set.nameFmt);
                this.fields = ko.mapping.fromJS(set.data);
                this.systemFields = ko.mapping.fromJS($.parseJSON('@Html.Raw(ViewData["SystemFields"].ToJson(PropertyNaming.Default))'));
                this.fields.subscribe(function () {
                    $.each(self.fields(), function (i) {
                        this.Sequence(i + 1);
                    });
                });
                //
                this.addField = function () {
                    var count = self.fields().length;
                    var field = ko.mapping.fromJS(emptyCustomField);
                    if (count === 0) { field.ShowInGrid(true); }
                    field.Sequence(count + 1);
                    field.FieldType(fieldType);
                    utilities.showDialog(self, field, false);
                };
                //
                this.editField = function () {
                    utilities.showDialog(self, this, true);
                };
                //
                this.insertField = function (item) {
                    self.fields.push(utilities.cloneObject(item));
                };
                //
                this.removeField = function (item) {
                    if (confirm('@("Are you sure you want to delete this item?".Localize())')) {
                        self.fields.remove(item);
                        window.leaveConfirm.stop();
                        return true;
                    }
                };
                this.addSystemField = function () {
                    var dlg = $(self.container).find('#systemFields');
                    utils.showDialog(dlg, 'Add System Fields', function () {
                        $.each(dlg.find('tbody input:checkbox:checked'), function () {
                            var fid = $(this).val();
                            var sf = $.grep(self.systemFields(), function (n, i) { return n.Id() == fid; })[0];
                            if (sf) {
                                self.insertField(sf);
                            }
                        });
                    });
                }
                //
                this.fmtName = function (index, name) {
                    return $.format(self.nameFmt(), index(), name);
                };
                this.fmtRuleName = function (parentIndex, index, name) {
                    var fmt = self.fmtName(parentIndex, 'ValidationRules[{0}].{1}');
                    return $.format(fmt, index(), name);
                };
            };

            //
            var customFieldEditorModel = function () {
                var self = this;
                var serializeData = function (data) {
                    if (data.CustomSettingsObj) { data.CustomSettings(data.CustomSettingsObj.json()); }
                    if (data.SelectionItemsObj) { data.SelectionItems(data.SelectionItemsObj.json()); }
                    $.each(data.ValidationRules(), function () {
                        this.ValidatorData($.toJSON(ko.mapping.toJS(this.ValidatorDataObj)));
                    });
                };
                var deserializeData = function (data) {
                    if (data.CustomSettings) {
                        if (data.CustomSettingsObj) {
                            data.CustomSettingsObj.update(data.CustomSettings());
                        } else {
                            data.CustomSettingsObj = new keyValuePairArray(data.CustomSettings(), true);
                        }
                    }
                    if (data.SelectionItems) {
                        if (data.SelectionItemsObj) {
                            data.SelectionItemsObj.update(data.SelectionItems());
                        } else {
                            data.SelectionItemsObj = new keyValuePairArray(data.SelectionItems());
                        }
                    }
                    $.each(data.ValidationRules(), function () {
                        this.ValidatorDataObj = ko.mapping.fromJS($.parseJSON(this.ValidatorData()));
                    });
                };

                //
                this.dataMap = ko.mapping.fromJS(emptyCustomField);
                deserializeData(this.dataMap);
                this.IsExistedField = ko.observable(false);

                //
                var refObj, originalField;
                this.initialize = function (ref, field, exist) {
                    refObj = ref;
                    originalField = field;
                    self.IsExistedField(exist);
                    deserializeData(field);
                    utilities.copyValue(field, self.dataMap);
                    utilities.fieldEditorTabs().koobooTab().showTab(0);
                    refreshSelectableValidationTypes();
                };
                this.currentRef = function () {
                    return refObj;
                };

                //
                this.save = function () {
                    if (!refObj || !utilities.fieldEditorForm().valid()) {
                        var tabSwapped = false;
                        utilities.fieldEditorTabs().find('.tab-index a').each(function (i) {
                            var target = $($(this).attr('href'));
                            if (target.find('input.input-validation-error, select.input-validation-error').length) {
                                $(this).hide().show('pulsate', {}, 100).show('highlight', {}, 200).show('pulsate', {}, 300).show('highlight', {}, 400);
                                if (!tabSwapped) { utilities.fieldEditorTabs().koobooTab().showTab(i); tabSwapped = true; }
                            }
                        });
                        return;
                    }
                    serializeData(self.dataMap);
                    if (self.IsExistedField()) {
                        utilities.copyValue(self.dataMap, originalField);
                    } else {
                        refObj.insertField(self.dataMap);
                    }
                    window.leaveConfirm.stop();
                    utilities.dialogElem().dialog('close');
                };
                this.cancel = function () {
                    utilities.dialogElem().dialog('close');
                };

                //
                var vtypes = [];
                $.each(emptyValidationRules, function (n) { vtypes.push(n); });
                this.validationTypes = ko.observableArray(ko.mapping.fromJS(vtypes)());
                this.selectedValidationType = ko.observable();
                var refreshSelectableValidationTypes = function () {
                    var newTypes = ko.mapping.fromJS(vtypes);
                    $.each(self.dataMap.ValidationRules(), function () { newTypes.remove(this.ValidatorName()); });
                    self.validationTypes(newTypes());
                    self.selectedValidationType(newTypes()[0]);
                };
                this.removeValidationRule = function (item) {
                    self.dataMap.ValidationRules.remove(item);
                    refreshSelectableValidationTypes();
                };
                this.addValidationRule = function () {
                    var selectType = self.selectedValidationType();
                    var emptyRule = ko.mapping.fromJS(emptyValidationRules[selectType]);
                    deserializeData({ ValidationRules: function () { return [emptyRule]; } });
                    self.dataMap.ValidationRules.push(emptyRule);
                    refreshSelectableValidationTypes();
                    utilities.updateFieldEditorValidation();
                };

                //
                this.showSelectionValueContents = ko.computed(function () {
                    return 'DropDownList,CheckBoxList,RadioList'.indexOf(self.dataMap.ControlType()) > -1;
                });
            };
            var customFieldModel = new customFieldEditorModel();
            ko.applyBindings(customFieldModel, utilities.dialogElem().get(0));
            utilities.fieldEditorTabs().koobooTab();

            // custom validator
            $.validator.addMethod('uniquecolumn', function (value) {
                var fields = customFieldModel.currentRef().fields();
                return !ko.utils.arrayFirst(fields, function (item) {
                    return item.Name().toLowerCase() === value.toLowerCase();
                });
            });
            $.validator.unobtrusive.adapters.addBool('uniquecolumn');

            // custom binding
            ko.bindingHandlers.jqData = {
                update: function (element, valueAccessor, allValueAccessor, viewModel) {
                    var data = valueAccessor() || viewModel;
                    $(element).data('attachedData', data);
                }
            };

            // export function
            $.fn.customFields = function (set) {
                return this.each(function () {
                    // ko
                    var model = new fieldsGridModel(set);
                    ko.applyBindings(model, this);
                    model.container = this;
                    $(this).data('fieldsGridModel', model);
                    // jq
                    $(this).find('table tbody').sortable({
                        helper: function (ev, ui) {
                            ui.children().each(function () {
                                $(this).width($(this).width());
                            });
                            return ui;
                        },
                        distance: 5,
                        start: function (event, ui) {
                            ui.placeholder.html('<td colspan="100"></td>');
                        },
                        stop: function (ev, ui) {
                            var newSequenceFields = []
                            ui.item.parent().children().each(function () {
                                newSequenceFields.push($(this).data('attachedData'));
                            });
                            var model = ui.item.parents('table').data('attachedData')
                            model.fields([]); model.fields(newSequenceFields);
                            window.leaveConfirm.stop();
                        }
                    });
                });
            };
            
        }(jQuery, ko));
    </script>
</div>
