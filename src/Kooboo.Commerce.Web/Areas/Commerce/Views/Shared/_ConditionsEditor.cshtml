
<div id="conditions-editor" style="display:none">
    <div class="topbar">
        <h1 class="title">@("Rule Conditions".Localize())</h1>
    </div>
    <div class="wrap">
        <div class="block conditions" style="width:550px">
            <div data-bind="foreach: conditions">
                <div style="padding-bottom:10px">
                    <div class="clearfix" data-bind="if: !isEditing()">
                        <div class="container">
                            <div class="columns">
                                <div class="span8" style="font-size:14px">
                                    <span data-bind="visible: $index() > 0">
                                        <span data-bind="text: logicalOperatorDisplayText"></span>
                                   </span>
                                    <span data-bind="text: paramName"></span>
                                    <span data-bind="text: comparisonOperatorDisplayText"></span>
                                    <span data-bind="html: valueDisplayText"></span>
                                </div>
                                <div class="span4">
                                    <a class="action" data-bind="click: edit">@Html.IconImage("edit-small")</a>
                                    <a class="action" data-bind="click: $root.removeCondition">@Html.IconImage("minus-small")</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="clearfix" data-bind="if: isEditing">
                        <div class="container">
                            <div class="columns">
                                <div class="span4">
                                    <select data-bind="value: temp.logicalOperator">
                                        <option value="AND">AND</option>
                                        <option value="OR">OR</option>
                                        <option value="ThenAND">Then AND</option>
                                        <option value="ThenOR">Then OR</option>
                                    </select>
                                </div>
                                <div class="span8">
                                    <select data-bind="options: $root.availableParameters, optionsText: 'displayName', optionsValue: 'name', value: temp.paramName"></select>
                                </div>
                            </div>
                        </div>
                        <div class="container" style="margin-top:5px">
                            <div class="columns">
                                <div class="span4">
                                    <select data-bind="options: temp.availableOperators, optionsText: 'displayName', optionsValue: 'name', value: temp.comparisonOperator"></select>
                                </div>
                                <div class="span8">
                                    <!-- ko if: temp.hasMultipleValues -->
                                    <select data-bind="options: temp.values, optionsText: 'text', optionsValue: 'value', value: temp.value"></select>
                                    <!-- /ko -->
                                    <!-- ko if: !temp.hasMultipleValues() -->
                                    <input type="text" data-bind="value: temp.value" />
                                    <!-- /ko -->
                                </div>
                            </div>
                        </div>
                        <div style="padding:5px 0">
                            <a href="#" class="button" data-bind="click: commitEditing">@("Save".Localize())</a>
                            <a href="#" class="button gray" data-bind="click: cancelEditing">@("Cancel".Localize())</a>
                        </div>
                    </div>
                </div>
            </div>
            <a href="#" data-bind="click: addCondition">@Html.IconImage("plus")</a>
        </div>
    </div>
    <div class="buttons">
        <a href="#" class="button gray right J_Cancel">@("Cancel".Localize())</a>
        <a href="#" class="button right J_Save">@("Save".Localize())</a>
    </div>
</div>

<script>
    (function () {
        var commerceName = '@Request["commerceName"]';

        function ConditionViewModel(root) {
            var _this = this;
            var _root = root;

            this.isNew = ko.observable(false);

            this.isEditing = ko.observable(false);

            this.logicalOperator = ko.observable('AND');

            this.logicalOperatorDisplayText = ko.computed(function () {
                var map = {
                    'AND': 'AND',
                    'ThenAND': 'Then AND',
                    'OR': 'OR',
                    'ThenOR': 'Then OR'
                };

                return map[_this.logicalOperator()] || '';
            });

            this.paramName = ko.observable();

            this.availableOperators = ko.computed(function () {
                return _root.availableOperatorsFor(_this.paramName());
            });

            this.comparisonOperator = ko.observable();

            this.comparisonOperatorDisplayText = ko.computed(function () {
                var op = _.find(_this.availableOperators(), function (x) {
                    return x.name() == _this.comparisonOperator();
                });

                if (op) {
                    return (op.shortcut() || op.displayName());
                }

                return _this.comparisonOperator() || '';
            });

            this.isNumberValue = ko.observable();

            this.valueType = ko.observable();

            this.value = ko.observable();

            this.valueDisplayText = ko.computed(function () {
                if (!_this.isNumberValue()) {
                    return '"' + _this.value() + '"';
                }

                return _this.value() || '';
            });

            this.temp = {
                logicalOperator: ko.observable(),
                paramName: ko.observable(),
                availableOperators: ko.observableArray(),
                comparisonOperator: ko.observable(),
                value: ko.observable(),
                valueType: ko.observable(),
                isNumberValue: ko.observable(),
                hasMultipleValues: ko.observable(),
                values: ko.observableArray()
            };

            this.edit = function () {
                _this.temp.logicalOperator(_this.logicalOperator());
                _this.temp.paramName(_this.paramName());
                _this.temp.comparisonOperator(_this.comparisonOperator());
                _this.temp.value(_this.value());                
                _this.isEditing(true);
            }

            this.commitEditing = function () {
                _this.logicalOperator(_this.temp.logicalOperator());
                _this.paramName(_this.temp.paramName());
                _this.comparisonOperator(_this.temp.comparisonOperator());
                _this.value(_this.temp.value());
                _this.isEditing(false);
                _this.isNew(false);
            }

            this.cancelEditing = function () {
                if (_this.isNew()) {
                    _root.removeCondition(_this);
                } else {
                    _this.isEditing(false);
                }
            }

            _this.paramName.subscribe(function (name) {
                var param = _root.findAvailableParameterByName(name);
                if (param) {
                    _this.valueType(param.valueType());
                    _this.isNumberValue(param.isNumberValue());
                    _this.value(null);
                }
            });

            _this.temp.paramName.subscribe(function (name) {
                var param = _root.findAvailableParameterByName(name);
                if (param) {
                    _this.temp.availableOperators(_root.availableOperatorsFor(param.name()));
                    _this.temp.valueType(param.valueType());
                    _this.temp.isNumberValue(param.isNumberValue());
                    _this.temp.hasMultipleValues(param.values().length > 0);
                    _this.temp.value(null);
                    _this.temp.values(param.values());
                }
            });
        }

        function ConditionsEditorViewModel() {
            var _this = this;

            this.init = function () {
                var deferred = $.Deferred();
                var contextModelTypeName = _this.contextModelTypeName();

                if (contextModelTypeName) {
                    $.get('@Url.Action("AvailableParameters", "Condition")', { commerceName: commerceName, contextModelTypeName: contextModelTypeName })
                     .then(function (data) {
                         $.each(data, function () {
                             viewModel.availableParameters.push(ko.mapping.fromJS(this));
                         });

                         deferred.resolve();
                     });
                } else {
                    deferred.resolve();
                }

                return deferred.promise();
            }

            this.contextModelTypeName = ko.observable();

            this.availableParameters = ko.observableArray([]);

            this.availableOperatorsFor = function (paramName) {
                if (!paramName) {
                    return [];
                }

                var param = _this.findAvailableParameterByName(paramName);
                return param.supportedOperators();
            }

            this.findAvailableParameterByName = function (paramName) {
                return _.find(_this.availableParameters(),
                            function (param) {
                                return param.name() == paramName;
                            }
                        );
            }

            this.conditions = ko.observableArray([]);

            this.createCondition = function () {
                var condition = new ConditionViewModel(_this);
                condition.isNew(true);
                if (_this.availableParameters().length > 0) {
                    condition.paramName(_this.availableParameters()[0].name());
                }
                return condition;
            }

            this.addCondition = function () {
                var condition = _this.createCondition();
                _this.conditions.push(condition);
                condition.edit();
            }

            this.removeCondition = function (condition) {
                _this.conditions.remove(condition);
            }

            // sync expression from the model if it's in the 'standard' mode
            this.getExpression = function () {
                var deferred = $.Deferred();

                var model = ko.mapping.toJS(_this);
                // Only conditions are needed
                model = {
                    conditions: model.conditions
                };

                $.ajax({
                    url: '@Url.Action("GetExpression", "Condition")' + '?commerceName=' + commerceName,
                    type: 'POST',
                    data: JSON.stringify(model),
                    contentType: 'application/json; charset=utf-8'
                })
                .done(function (exp) {
                    deferred.resolve(exp);
                });

                return deferred.promise();
            }

            this.setExpression = function (exp) {
                _this.conditions.removeAll();

                $.get('@Url.Action("GetConditionModels", "Condition")', {
                    expression: exp,
                    contextModelType: _this.contextModelTypeName(),
                    commerceName: commerceName
                 })
                 .done(function (result) {
                     $.each(result.models, function (i) {
                         var condition = new ConditionViewModel(_this);
                         _this.conditions.push(ko.mapping.fromJS(this, {}, condition));
                     });
                 });
            }
        }

        var viewModel = new ConditionsEditorViewModel();

        var ConditionsEditor = {
            model: viewModel,
            inited: false,
            $dialog: null,
            init: function (options) {
                var self = this;
                var deferred = $.Deferred();

                if (!self.inited) {
                    options = options || {};

                    if (options.contextModelTypeName) {
                        self.model.contextModelTypeName(options.contextModelTypeName);
                    }

                    self.$dialog = $('#conditions-editor').dialog({
                        autoOpen: false,
                        modal: true
                    });

                    self.$dialog.find('.J_Cancel')
                                .on('click', function (e) {
                                    self.close();
                                    e.preventDefault();
                                });
                    self.$dialog.find('.J_Save')
                                .on('click', function (e) {
                                    if (options.save) {
                                        var anyNotSaved = _.any(self.model.conditions(), function (it) {
                                            return it.isEditing();
                                        });

                                        if (anyNotSaved) {
                                            window.info.show('@("You have unsaved conditions, please save them or cancel editing.".Localize())', false);
                                        } else if (self.model.conditions().length === 0) {
                                            window.info.show('@("Please add at least one condition")', false);
                                        } else {
                                            self.model.getExpression().then(function (exp) {
                                                options.save.apply(self, [exp]);
                                                self.close();
                                            });
                                        }
                                    }
                                    e.preventDefault();
                                });

                    self.model.init()
                              .then(function () {
                                  ko.applyBindings(self.model, self.$dialog[0]);
                                  deferred.resolve();
                                  $(document).dialogScroll();
                              });

                    self.inited = true;
                } else {
                    deferred.resolve();
                }

                return deferred.promise();
            },
            open: function (options) {
                this.model.setExpression(null);

                if (options && options.expression) {
                    this.model.setExpression(options.expression);
                } else {
                    this.model.addCondition();
                }

                var self = this;
                self.init().then(function () {
                    self.$dialog.dialog('open');
                });
            },
            close: function () {
                this.$dialog.dialog('close');
            }
        };

        window.ConditionsEditor = ConditionsEditor;

    })(jQuery);
</script>