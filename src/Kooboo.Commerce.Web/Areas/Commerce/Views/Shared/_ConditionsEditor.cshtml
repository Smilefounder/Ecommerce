
<div id="conditions-editor" style="display:none">
    <div class="topbar">
        <h1 class="title" data-bind="text: dialogTitle">@("Rule Conditions".Localize())</h1>
    </div>
    <div class="wrap">
        <div class="condition-result">
            <span data-bind="html: expressionPreview" class="conditions-expression"></span>
        </div>
        <div class="block conditions-v2">
            <div class="item">
                <span class="title">Condition 1:</span>
                <div class="button blank dropdown">
                    <span>Include</span>
                    @Html.IconImage("sprite")
                    <ul>
                        <li><a href="#">Include</a></li>
                        <li><a href="#">Exclude</a></li>
                    </ul>
                </div>
                <a class="action right" href="#">@Html.IconImage("minus-small")</a>
                <div class="wrap">
                    <div class="columns">
                        <div class="span4">
                            <select>
                                <option>Label 1</option>
                                <option>Label 2</option>
                                <option>Label 3</option>
                                <option>Label 4</option>
                            </select>
                        </div>
                        <div class="span2">
                            <select>
                                <option><</option>
                                <option>></option>
                                <option>=</option>
                            </select>
                        </div>
                        <div class="span6">
                            <input type="text">
                        </div>
                    </div>
                    <a class="action" href="#">@Html.IconImage("minus")</a>
                </div>
                <span class="label">OR</span>
                <div class="wrap">
                    <div class="columns">
                        <div class="span4">
                            <select>
                                <option>Label 1</option>
                                <option>Label 2</option>
                                <option>Label 3</option>
                                <option>Label 4</option>
                            </select>
                        </div>
                        <div class="span2">
                            <select>
                                <option><</option>
                                <option>></option>
                                <option>=</option>
                            </select>
                        </div>
                        <div class="span6">
                            <input type="text">
                        </div>
                    </div>
                    <a class="action" href="#">@Html.IconImage("minus")</a>
                </div>
                <p class="actions">
                    <a class="button" href="#">+OR</a>
                </p>
                <div class="separator">
                    <span class="label">AND</span>
                </div>
                <div class="wrap">
                    <div class="columns">
                        <div class="span4">
                            <select>
                                <option>Label 1</option>
                                <option>Label 2</option>
                                <option>Label 3</option>
                                <option>Label 4</option>
                            </select>
                        </div>
                        <div class="span2">
                            <select>
                                <option><</option>
                                <option>></option>
                                <option>=</option>
                            </select>
                        </div>
                        <div class="span6">
                            <input type="text">
                        </div>
                    </div>
                    <a class="action" href="#">@Html.IconImage("minus")</a>
                </div>
                <p class="actions">
                    <a class="button" href="#">+OR</a>
                    <a class="button" href="#">+AND</a>
                </p>
            </div>
        </div>
        <form id="conditions-form">
            <div class="block conditions">
                <div class="wrap" data-bind="foreach: { data: conditions, afterRender: $root.updateValidation }">
                    <div class="item">
                        <div class="logic-operator">
                            <select data-bind="value: logicalOperator">
                                <option value="AND">AND</option>
                                <option value="OR">OR</option>
                                <option value="ThenAND">Then AND</option>
                                <option value="ThenOR">Then OR</option>
                            </select>
                        </div>
                        <div class="columns">
                            <div class="span4">
                                <select data-bind="options: $root.availableParameters, optionsText: 'displayName', optionsValue: 'name', value: paramName"></select>
                            </div>
                            <div class="span2">
                                <select data-bind="options: availableOperators, optionsText: 'displayName', optionsValue: 'name', value: comparisonOperator"></select>
                            </div>
                            <div class="span6">
                                <span data-bind="if: hasMultipleValues">
                                    <select data-bind="options: values, optionsText: 'text', optionsValue: 'value', value: value"></select>
                                </span>
                                <span data-bind="if: !hasMultipleValues()">
                                    <input type="text" data-bind="value: value, attr: { name: 'ConditionValueTextBox_' + $index() }"
                                           data-val="true"
                                           data-val-required="*" />
                                </span>
                            </div>
                        </div>
                        <a class="action" data-bind="click: $root.removeCondition">@Html.IconImage("minus")</a>
                    </div>
                </div>
                <a class="action" data-bind="click: addCondition">@Html.IconImage("plus")</a>
            </div>
        </form>
    </div>
    <div class="buttons">
        <a href="#" class="button gray right btn-cancel-condition-editor">@("Cancel".Localize())</a>
        <a href="#" class="button right btn-submit-condition-editor">@("Save".Localize())</a>
    </div>
</div>

<script>
    (function () {
        function ConditionViewModel(root) {
            var _this = this;
            var _root = root;

            this.logicalOperator = ko.observable('AND');

            this.logicalOperatorDisplayText = ko.computed(function () {
                var map = {
                    'AND': 'AND',
                    'ThenAND': 'Then AND',
                    'OR': 'OR',
                    'ThenOR': 'Then OR'
                };

                return map[_this.logicalOperator()] || '';
            });

            this.paramName = ko.observable();

            this.availableOperators = ko.computed(function () {
                return _root.availableOperatorsFor(_this.paramName());
            });

            this.comparisonOperator = ko.observable();

            this.comparisonOperatorDisplayText = ko.computed(function () {
                var op = _.find(_this.availableOperators(), function (x) {
                    return x.name() == _this.comparisonOperator();
                });

                if (op) {
                    return (op.alias() || op.displayName());
                }

                return _this.comparisonOperator() || '';
            });

            this.isNumberValue = ko.observable();

            this.valueType = ko.observable();

            this.hasMultipleValues = ko.observable();

            this.values = ko.observableArray();

            this.value = ko.observable();

            this.valueDisplayText = ko.computed(function () {
                if (!_this.isNumberValue()) {
                    return '"' + _this.value() + '"';
                }

                return _this.value() || '';
            });

            this.isChanged = ko.observable();

            _this.paramName.subscribe(function (name) {
                var param = _root.findAvailableParameterByName(name);
                if (param) {
                    _this.valueType(param.valueType());
                    _this.isNumberValue(param.isNumberValue());
                    _this.hasMultipleValues(param.values().length > 0);
                    _this.value(null);
                    _this.values(param.values());
                }
            });

            // Change tracking
            _this.logicalOperator.subscribe(notifyChanges);
            _this.paramName.subscribe(notifyChanges);
            _this.comparisonOperator.subscribe(notifyChanges);
            _this.value.subscribe(notifyChanges);

            _this.isChanged.subscribe(function (changed) {
                _root.isChanged(true);
            });

            function notifyChanges() {
                _this.isChanged(true);
            }
        }

        function ConditionsEditorViewModel() {
            var _this = this;

            this.init = function () {
                var deferred = $.Deferred();
                var contextModelTypeName = _this.contextModelTypeName();

                if (contextModelTypeName) {
                    $.get('@Url.Action("AvailableParameters", "Condition")', { contextModelTypeName: contextModelTypeName })
                     .then(function (data) {
                         $.each(data, function () {
                             viewModel.availableParameters.push(ko.mapping.fromJS(this));
                         });

                         // update expression preview on changed
                         _this.isChanged.subscribe(function (changed) {
                             if (changed) {
                                 _this.updateExpressionPreviewIfValid();
                                 // always reset, so we are able to get next change
                                 _this.markUnchanged();
                             }
                         });

                         deferred.resolve();
                     });
                } else {
                    deferred.resolve();
                }

                return deferred.promise();
            }

            this.dialogTitle = ko.observable('@("Rule Conditions".Localize())');

            this.isChanged = ko.observable(false).extend({ throttle: 500 });

            this.markUnchanged = function () {
                $.each(_this.conditions(), function () {
                    this.isChanged(false);
                });
                _this.isChanged(false);
            }

            this.expressionPreview = ko.observable();

            this.contextModelTypeName = ko.observable();

            this.availableParameters = ko.observableArray([]);

            this.availableOperatorsFor = function (paramName) {
                if (!paramName) {
                    return [];
                }

                var param = _this.findAvailableParameterByName(paramName);
                return param.supportedOperators();
            }

            this.findAvailableParameterByName = function (paramName) {
                return _.find(_this.availableParameters(),
                            function (param) {
                                return param.name() == paramName;
                            }
                        );
            }

            this.conditions = ko.observableArray([]);

            this.createCondition = function () {
                var condition = new ConditionViewModel(_this);
                if (_this.availableParameters().length > 0) {
                    condition.paramName(_this.availableParameters()[0].name());
                }
                return condition;
            }

            this.addCondition = function () {
                var condition = _this.createCondition();
                _this.conditions.push(condition);
                _this.isChanged(true);
            }

            this.removeCondition = function (condition) {
                _this.conditions.remove(condition);
                _this.isChanged(true);
            }

            this.updateValidation = function () {
                $.validator.unobtrusive.reparse($('#conditions-form'));
            }

            this.validate = function () {
                return $('#conditions-form').valid();
            }

            this.isValid = function () {
                return $('#conditions-form').validate().checkForm();
            }

            this.updateExpressionPreviewIfValid = function () {
                if (_this.isValid()) {
                    _this.getExpression(true)
                         .done(function (exp) {
                             _this.expressionPreview(exp);
                         });
                }
            }

            this.getExpression = function (prettify) {
                var deferred = $.Deferred();

                var model = ko.mapping.toJS(_this);
                // Only conditions are needed
                model = {
                    conditions: model.conditions
                };

                $.ajax({
                    url: '@Url.Action("GetExpression", "Condition")' + '?contextModelType=' + _this.contextModelTypeName() + '&prettify=' + (prettify || false),
                    type: 'POST',
                    data: JSON.stringify(model),
                    contentType: 'application/json; charset=utf-8'
                })
                .done(function (exp) {
                    deferred.resolve(exp);
                });

                return deferred.promise();
            }

            this.setExpression = function (exp) {
                _this.conditions.removeAll();

                $.get('@Url.Action("GetConditionModels", "Condition")', {
                    expression: exp,
                    contextModelType: _this.contextModelTypeName()
                })
                 .done(function (result) {
                     $.each(result.models, function (i) {
                         var condition = new ConditionViewModel(_this);
                         _this.conditions.push(ko.mapping.fromJS(this, {}, condition));
                     });
                 });
            }
        }

        var viewModel = new ConditionsEditorViewModel();

        var ConditionsEditor = {
            model: viewModel,
            inited: false,
            $dialog: null,
            init: function (options) {
                var self = this;
                var deferred = $.Deferred();

                if (!self.inited) {
                    options = options || {};

                    if (options.contextModelTypeName) {
                        self.model.contextModelTypeName(options.contextModelTypeName);
                    }

                    self.$dialog = $('#conditions-editor').dialog({
                        autoOpen: false,
                        modal: true
                    });

                    self.$dialog.find('.btn-cancel-condition-editor')
                                .on('click', function (e) {
                                    self.close();
                                    e.preventDefault();
                                });
                    self.$dialog.find('.btn-submit-condition-editor')
                                .on('click', function (e) {
                                    if (options.save) {
                                        // unfocus the inputs so the changes can be updated to view model before save
                                        self.$dialog.find(':focus').blur();

                                        if (self.model.validate()) {
                                            if (self.model.conditions().length === 0) {
                                                window.info.show('@("Please add at least one condition")', false);
                                            } else {
                                                self.model.getExpression().then(function (exp) {
                                                    options.save.apply(self, [exp]);
                                                    self.close();
                                                });
                                            }
                                        }
                                    }
                                    e.preventDefault();
                                });

                    self.model.init()
                              .then(function () {
                                  ko.applyBindings(self.model, self.$dialog[0]);
                                  deferred.resolve();
                                  $(document).dialogScroll();
                              });

                    self.inited = true;
                } else {
                    deferred.resolve();
                }

                return deferred.promise();
            },
            open: function (options) {
                options = options || {};

                this.model.setExpression(null);

                if (options.expression) {
                    this.model.setExpression(options.expression);
                } else {
                    this.model.addCondition();
                }

                if (options.title) {
                    this.model.dialogTitle(options.title);
                }

                var self = this;
                self.init().then(function () {
                    self.$dialog.dialog('open');
                });
            },
            close: function () {
                this.$dialog.dialog('close');
            }
        };

        window.ConditionsEditor = ConditionsEditor;

    })(jQuery);
    $(function () {
        $('#conditions-editor').scroll(function () {
            if ($(this).scrollTop() != 0) {
                $('.condition-result').addClass('fixed');
                $('.condition-result').css('top', $(this).scrollTop() + $('#conditions-editor .topbar').outerHeight());
                $('.block.conditions').css('margin-top', $('.condition-result').height() + parseInt($('.condition-result').css('margin-bottom')));
            } else {
                $('.condition-result').removeClass('fixed');
                $('.block.conditions').css('margin-top', 0);
            }
        })

    })
</script>