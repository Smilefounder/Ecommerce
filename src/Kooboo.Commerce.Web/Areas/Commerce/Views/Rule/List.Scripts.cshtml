@using Newtonsoft.Json
@using Kooboo.Commerce.Web.Areas.Commerce.Models.Rules

@model IList<RuleModelBase>

<script>
    window.RuleTypes = {};
    window.AvailableActivities = @Html.Raw(JsonConvert.SerializeObject(ViewBag.AvailableActivities));
</script>

@Html.Partial("RuleType.IfElse")
@Html.Partial("RuleType.SwitchCase")
@Html.Partial("RuleType.Always")

@Html.Partial("_ConditionsDialog")
<script>
    ConditionsDialog.instance().setDataContextType('@Html.Raw(ViewBag.EventTypeName)');
</script>

<script>

    $(function () {

        var eventName = '@(ViewBag.Event.EventName)';
        var activeRuleIndex = @(Request.QueryString["activeRule"] ?? "null");
        var originalRules = @Html.Raw(JsonConvert.SerializeObject(Model, new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Auto }));

        function RulesViewModel() {
            var self = this;

            self.RuleTypes = []

            self.AvailableActivities = [];

            self.GenerateSortableConnectClass = function () {
                return 'ko-container-' + new Date().getTime() + Math.round(Math.random() * 10000);
            }

            self.Rules = ko.observableArray();

            self.AddRule = function (rules, type) {
                rules.push(type.CreateModel());
                var $rule = $('.top-level-rule-holder:last').find('>.rule');
                ExpandRule($rule);
            }

            self.RemoveRule = function (rule, e) {
                var container = $(e.target).parents('[data-rules-prop]')[0];
                var rules = ko.dataFor(container)[$(container).data('rules-prop')];
                rules.remove(rule);
            }

            self.GetRuleSummary = function (rule) {
                return window.RuleTypes[rule.Type()].GetSummary(rule);
            }

            self.Save = function () {
                window.loading.show();

                var rules = ko.mapping.toJS(self.Rules);

                $.post('@Url.Action("Save")?eventName=' + eventName, { json: JSON.stringify(rules) })
                 .done(function () {
                     window.loading.hide();
                     info.show('@("Rules are successfully saved.".Localize())', true);
                     originalRules = rules;
                 })
                 .fail(function (xhr) {
                     window.loading.hide();
                     var result = JSON.parse(xhr.responseText);
                     info.show(result.message, false);
                 });
            }
        }

        var model = new RulesViewModel();

        window.RootViewModel = model;

        // Initialize
        $.each(window.RuleTypes, function () {
            model.RuleTypes.push(this);
        });
        $.each(window.AvailableActivities, function () {
            model.AvailableActivities.push(this);
        });

        $.each(originalRules, function () {
            model.Rules.push(ko.mapping.fromJS(this));
        });

        $.each(window.RuleTypes, function () {
            if (this.OnPageDataBinding) {
                this.OnPageDataBinding(model);
            }
        });

        // Data binding
        ko.applyBindings(model, document.getElementById('rules-container'));

        // Button Actions
        $('[data-toggle="save-rules"]').on('click', function (e) {
            model.Save();
            e.preventDefault();
        });

        // Expand/collpase Rule
        $(document).on('click', '[data-toggle="expand-rule"]', function (e) {
            ExpandRule($(this).closest('.rule'));
            e.preventDefault();
        });
        $(document).on('click', '[data-toggle="collapse-rule"]', function (e) {
            CollapseRule($(this).closest('.rule'));
            e.preventDefault();
        });

        if (activeRuleIndex !== null) {
            var $rule = $('.top-level-rule-holder:nth(' + activeRuleIndex + ')').find('>.rule');
            ExpandRule($rule);
            kb.ui.Animation.scrollTo($rule, {
                container: '#main > .wrap',
                offset: 10
            });
        }

        function ExpandRule($rule) {
            $rule.find('.summary:first').hide();
            $rule.find('.detail:first').show();
        }

        function CollapseRule($rule) {
            $rule.find('.summary:first').show();
            $rule.find('.detail:first').hide();
        }

        // Use custom leave confirm
        setTimeout(function () {
            window.leaveConfirm.unbind();
        }, 100);

        $(window).on('beforeunload', function() {
            if (JSON.stringify(ko.mapping.toJS(model.Rules)) !== JSON.stringify(originalRules)) {
                return '@("Rules are modified. Are you sure to leave without saving?".Localize())';
            }
        });
    });
</script>