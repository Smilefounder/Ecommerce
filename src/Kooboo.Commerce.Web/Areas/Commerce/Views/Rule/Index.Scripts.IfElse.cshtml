@using Newtonsoft.Json;
@using Kooboo.Commerce.Web.Areas.Commerce.Models.Rules;

<script type="text/html" id="RuleTemplate-IfElse">
    <div class="rule">
        @Html.Partial("_RuleHeader")
        <div class="detail" data-bind="style: { display: $($element).parents('.rule').length === 1 ? 'none' : '' }">
            @Html.IconImage("drag")
            <a class="action remove" href="#" data-bind="click: $root.RemoveRule">@Html.IconImage("minus-small")</a>
            <div class="wrap">
                <div class="columns">
                    <div class="span1">
                        <span class="rule-label">IF</span>
                    </div>
                    <div class="span11">
                        <div class="condition">
                            <a class="label label-info" data-bind="html: $root.GetConditionsDescription($data), click: $root.EditCondition"></a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="wrap">
                <div class="columns">
                    <div class="span1">
                        <span class="rule-label">THEN</span>
                    </div>
                    <div class="span11">
                        <div data-bind="foreach: Then" data-rules-prop="Then">
                            <div data-bind="template: { data: $data, name: 'RuleTemplate-' + Type() }"></div>
                        </div>
                        <div class="button dropdown only-icon" data-toggle="dropdown">
                            @Html.IconImage("plus-small")
                            <ul data-bind="foreach: $root.RuleTypes">
                                <li>
                                    <a data-bind="click: $root.AddRule.bind($data, $parent.Then), text: DisplayName"></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <div class="wrap">
                <div class="columns">
                    <div class="span1">
                        <span class="rule-label">ELSE</span>
                    </div>
                    <div class="span11">
                        <div data-bind="foreach: Else" data-rules-prop="Else">
                            <div data-bind="template: { data: $data, name: 'RuleTemplate-' + Type() }"></div>
                        </div>
                        <div class="button dropdown only-icon">
                            @Html.IconImage("plus-small")
                            <ul data-bind="foreach: $root.RuleTypes">
                                <li>
                                    <a data-bind="click: $root.AddRule.bind($data, $parent.Else), text: DisplayName"></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            @Html.Partial("_RuleFooter")
        </div>
    </div>
</script>

<script>
    (function () {

        var defaultModel = @Html.Raw(JsonConvert.SerializeObject(new IfElseRuleModel(), new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Objects }));

        window.RuleTypes['IfElse'] = {

            Name: 'IfElse',

            DisplayName: 'IF-ELSE-THEN',

            CreateModel: function (data) {
                var model = ko.mapping.fromJS(defaultModel);
                if (data){
                    ko.mapping.fromJS(data, {}, model);
                }
                return model;
            },

            GetSummary: function (rule) {
                var html = '<span class="tag">IF</span> ';
                if (rule.Conditions().length > 0) {
                    html += '<span>(' + window.RootViewModel.GetConditionsDescription(rule) + ')</span>';
                } else {
                    html += '<span>()</span>';
                }

                html += ' <span class="tag">THEN</span> ';

                var alwaysRuleChild = _.find(rule.Then(), function (r) {
                    return r.Type() === 'Always';
                });

                if (alwaysRuleChild) {
                    if (alwaysRuleChild.Activities().length > 0) {
                        html += '<span class="label">' + alwaysRuleChild.Activities()[0].Description() + '</span>';
                    }
                    if (alwaysRuleChild.Activities().length > 1 || rule.Then().length > 1) {
                        html += '<span>...</span>';
                    }
                } else {
                    html += '<span class="label">...</span>';
                }

                return html;
            },

            OnPageDataBinding: function (root) {
                $.extend(root, {

                    GetConditionsDescription: function (rule) {
                        if (rule.Conditions().length === 0) {
                            return '@("Edit condition".Localize())';
                        }

                        var desc = '';

                        $.each(rule.Conditions(), function (i) {
                            if (i > 0) {
                                desc += ' AND '
                            }

                            if (this.Type() === 'Exclude') {
                                desc += ' NOT '
                            }

                            desc += '(' + this.Expression() + ')';
                        });

                        return desc;
                    },

                    EditCondition: function (rule) {
                        var dialog = ConditionsDialog.instance();

                        dialog.onSubmitted = function (conditions) {
                            rule.Conditions.removeAll();
                            $.each(conditions, function () {
                                rule.Conditions.push({
                                    Type: ko.observable(this.type),
                                    Expression: ko.observable(this.expression)
                                });
                            });
                        };

                        dialog.open({
                            conditions: ko.mapping.toJS(rule.Conditions())
                        });
                    }

                });
            }
        };
    })();
</script>