@using Newtonsoft.Json;
@using Kooboo.Commerce.Web.Areas.Commerce.Models.Rules;

<script type="text/html" id="RuleTemplate-IfElse">
    <div class="rule">
        <!-- ko if: $($element).parents('.rule').length === 1 -->
        <div class="summary">
            <a href="#" data-toggle="expand-rule">
                @Html.IconImage("toggle")
            </a>
            @Html.IconImage("drag")
            <a class="action remove" href="#" data-bind="click: $root.RemoveRule">@Html.IconImage("minus-small")</a>
            <div data-bind="template: { name: 'RuleSummaryTemplate-IfElse', data: $data }"></div>
        </div>
        <!-- /ko -->
        <div class="detail" data-bind="style: { display: $($element).parents('.rule').length === 1 ? 'none' : '' }">
            @Html.IconImage("drag")
            <a class="action remove" href="#" data-bind="click: $root.RemoveRule">@Html.IconImage("minus-small")</a>
            <div class="wrap">
                <div class="columns">
                    <div class="span1">
                        <span class="rule-label">IF</span>
                    </div>
                    <div class="span11">
                        <div class="condition">
                            <a class="label label-info" data-bind="html: window.RuleTypes['IfElse'].GetConditionsDescription($data), click: $root.EditCondition"></a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="wrap">
                <div class="columns">
                    <div class="span1">
                        <span class="rule-label">THEN</span>
                    </div>
                    <div class="span11">
                        <div data-bind="sortable: { data: Then, connectClass: $root.GenerateSortableConnectClass(), options: { handle: '.icon.drag' } }" data-rules-prop="Then">
                            <div data-bind="template: { data: $data, name: 'RuleTemplate-' + Type() }"></div>
                        </div>
                        <div class="button dropdown only-icon" data-toggle="dropdown">
                            @Html.IconImage("plus-small")
                            <ul data-bind="foreach: $root.RuleTypes">
                                <li>
                                    <a data-bind="click: $root.AddRule.bind($data, $parent.Then), text: DisplayName"></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <div class="wrap">
                <div class="columns">
                    <div class="span1">
                        <span class="rule-label">ELSE</span>
                    </div>
                    <div class="span11">
                        <div data-bind="sortable: { data: Else, connectClass: $root.GenerateSortableConnectClass(), options: { handle: '.icon.drag' } }" data-rules-prop="Else">
                            <div data-bind="template: { data: $data, name: 'RuleTemplate-' + Type() }"></div>
                        </div>
                        <div class="button dropdown only-icon">
                            @Html.IconImage("plus-small")
                            <ul data-bind="foreach: $root.RuleTypes">
                                <li>
                                    <a data-bind="click: $root.AddRule.bind($data, $parent.Else), text: DisplayName"></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            @Html.Partial("_RuleFooter")
        </div>
    </div>
</script>

<script type="text/html" id="RuleSummaryTemplate-IfElse">
    <div class="summary-text">
        <span class="tag">IF</span>
        <span>(<span data-bind="html: window.RuleTypes['IfElse'].GetConditionsDescription($data)"></span>)</span>
        <!-- ko if: Then().length > 0 -->
        <span class="tag">THEN</span>
        <span data-toggle="expand-rule" data-bind="html: window.RuleTypes['IfElse'].GetBranchSummary(Then()), tooltip: window.RuleTypes['IfElse'].GetBranchTooltip(Then())"></span>
        <!-- /ko -->
        <!-- ko if: Else().length > 0 -->
        <span class="tag">ELSE</span>
        <span data-toggle="expand-rule" data-bind="html: window.RuleTypes['IfElse'].GetBranchSummary(Else()), tooltip: window.RuleTypes['IfElse'].GetBranchTooltip(Else())"></span>
        <!-- /ko -->
    </div>
</script>

<script>
    (function () {

        var defaultModel = @Html.Raw(JsonConvert.SerializeObject(new IfElseRuleModel(), new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Objects }));
        
        window.RuleTypes = window.RuleTypes || {};
        window.RuleTypes['IfElse'] = {

            Name: 'IfElse',

            DisplayName: 'IF-ELSE-THEN',

            CreateModel: function (data) {
                var model = ko.mapping.fromJS(defaultModel);
                if (data){
                    ko.mapping.fromJS(data, {}, model);
                }
                return model;
            },

            GetBranchSummary: function (rules) {
                var html = '';

                if (rules.length === 1 && rules[0].Type() === 'Always') {
                    if (rules[0].Activities().length > 0) {
                        html += '<span class="label">';
                        html += rules[0].Activities()[0].Description();
                        if (rules[0].Activities().length > 1) {
                            html += '...';
                        }
                        html += '</span>';
                    }
                } else {
                    html += '<span class="label">...</span>';
                }

                return html;
            },

            GetBranchTooltip: function (rules) {
                // In this case, the detail is shown directly, so no need to have a tooltip
                if (rules.length === 1 && rules[0].Type() === 'Always' && rules[0].Activities().length <= 1) {
                    return '';
                }

                var html = '';
                $.each(rules, function (i, rule) {
                    if (i > 0) {
                        html += '<br/>'
                    }
                    html += window.RuleTypes[rule.Type()].RenderTooltip(rule, 0);
                });

                return html;
            },

            RenderTooltip: function (rule, level) {
                var html = '<div style="padding-left:' + (10 * level) + 'px">';

                html += '<div>IF (' + window.RuleTypes['IfElse'].GetConditionsDescription(rule) + ')</div>';
                html += '<div>THEN</div>';

                if (rule.Then().length > 0) {
                    $.each(rule.Then(), function (i) {
                        if (i > 0) {
                            html += '<br/>';
                        }
                        html += window.RuleTypes[this.Type()].RenderTooltip(this, level + 1);
                    });
                } else {
                    html += '<div>[EMPTY]</div>';
                }

                if (rule.Else().length > 0) {
                    html += '<div>ELSE</div>';
                    $.each(rule.Else(), function(i) {
                        if (i > 0) {
                            html += '<br/>';
                        }
                        html += window.RuleTypes[this.Type()].RenderTooltip(this, level + 1);
                    });
                }

                html += '</div>';

                return html;
            },

            GetConditionsDescription: function (rule) {
                if (rule.Conditions().length === 0) {
                    return '@("Edit condition".Localize())';
                }

                var desc = '';

                $.each(rule.Conditions(), function (i) {
                    if (i > 0) {
                        desc += ' AND '
                    }

                    if (this.Type() === 'Exclude') {
                        desc += ' NOT '
                    }

                    desc += '(' + this.Expression() + ')';
                });

                return desc;
            },

            OnPageDataBinding: function (root) {
                $.extend(root, {
                    EditCondition: function (rule) {
                        var dialog = ConditionsDialog.instance();

                        dialog.onSubmitted = function (conditions) {
                            rule.Conditions.removeAll();
                            $.each(conditions, function () {
                                rule.Conditions.push({
                                    Type: ko.observable(this.type),
                                    Expression: ko.observable(this.expression)
                                });
                            });
                        };

                        dialog.open({
                            conditions: ko.mapping.toJS(rule.Conditions())
                        });
                    }

                });
            }
        };
    })();
</script>