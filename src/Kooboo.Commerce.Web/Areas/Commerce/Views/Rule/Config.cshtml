@{
    ViewBag.Title = "Conditions";
    var contextModelTypeName = (string)ViewBag.ContextModelTypeName;
}

@section ScriptCSS {
    <style type="text/css">
        .condition {
            margin-top: 5px;
        }
        .condition-op {
            width: 100px;
            float: left;
        }
        .condition-main {
            float: left;
            margin-left: 5px;
            width: 800px;
        }
        .condition-group {
            margin-top: 10px;
        }
        .condition-group-op {
            width: 100px;float:left;
            padding-top:5px;
        }
        .condition-group-main {
            background: #eee;
            width: 800px;
            float: left;
            margin-left: 5px;
            padding: 4px;
            border: #ddd 1px solid;
        }
        .condition-group-main .condition-main {
            width: 690px;
        }
        .condition-group-toolbar {
            background: #fff;
            padding: 5px;
        }
        .condition-group-toolbar > a {
            display: inline-block;
            vertical-align: middle;
        }
    </style>
}

<div id="conditions-container">
    <div style="margin-bottom:10px">
        <!-- ko if: mode() == 'standard' -->
        <a href="#" data-bind="click: addCondition" class="button">@("Add Condition".Localize())</a>
        <a href="#" data-bind="click: addConditionGroup" class="button">@("Add Group".Localize())</a>
        <a href="#" data-bind="click: switchToExpertMode" class="button">@("Switch to Expert Mode".Localize())</a>
        <!-- /ko-->
        <!-- ko if: mode() == 'expert' -->
        <a href="#" data-bind="click: switchToStandardMode" class="button">@("Switch to Standard Mode".Localize())</a>
        <!-- /ko -->
    </div>
    <div data-bind="if: mode() == 'standard'">
        <!-- ko foreach: conditions -->
            <!-- ko if: isGroup -->
            <div class="clearfix condition-group" style="margin-top:10px">
                <div class="condition-group-op">
                    <select>
                        <option value="AND">AND</option>
                        <option value="OR">OR</option>
                    </select>
                </div>
                <div class="condition-group-main">
                    <div class="condition-group-toolbar">
                        <a href="#" data-bind="click: $root.addCondition" title="@("Add Conditoin".Localize())">@Html.IconImage("plus")</a>
                        <a href="#" data-bind="click: $root.removeCondition" title="@("Remove Group".Localize())">@Html.IconImage("minus")</a>
                    </div>
                    <div>
                        <!-- ko foreach: conditions -->
                        <div data-bind="template: { name: 'NonGroupConditionTemplate' }"></div>
                        <!-- /ko -->
                    </div>
                </div>
            </div>
            <!-- /ko -->
            <div data-bind="if: !isGroup()">
                <div data-bind="template: { name: 'NonGroupConditionTemplate' }"></div>
            </div>
        <!-- /ko -->
    </div>
    <div data-bind="if: mode() == 'expert'">
        <textarea data-bind="value: expression"></textarea>
    </div>
</div>

<script type="text/html" id="NonGroupConditionTemplate">
    <div class="clearfix condition">
        <div class="condition-op">
            <span data-bind="attr: { style: $index() == 0 ? 'visibility:hidden' : '' }">
                <select data-bind="value: logicalOperator">
                    <option value="AND">AND</option>
                    <option value="OR">OR</option>
                </select>
            </span>
        </div>
        <div class="condition-main">
            <select class="small" data-bind="options: $root.availableParameters, optionsText: 'displayName', optionsValue: 'name', value: paramName"></select>
            <select style="width:120px" data-bind="options: availableOperators, optionsText: 'displayName', optionsValue: 'name', value: comparisonOperator"></select>
            <input class="small" type="text" data-bind="value: value" />
            <a href="#" data-bind="click: $root.removeCondition" style="display:inline-block;vertical-align:middle">@Html.IconImage("minus")</a>
        </div>
    </div>
</script>

<script>
    $(function () {
        var commerceName = '@Request["commerceName"]';
        var contextModelTypeName = '@contextModelTypeName';

        var koMappingConfig = {
            conditions: {
                create: function (args) {
                    var condition = new ConditionViewModel(viewModel);
                    ko.mapping.fromJS(args.data, koMappingConfig, condition);
                    return condition;
                }
            }
        };

        function ConditionViewModel(root) {
            var _this = this;
            var _root = root;

            this.logicalOperator = ko.observable('AND');

            this.paramName = ko.observable();

            this.comparisonOperator = ko.observable();

            this.value = ko.observable();

            this.valueType = ko.observable();

            this.isGroup = ko.observable(false);

            this.conditions = ko.observableArray([]);

            this.availableOperators = ko.computed(function () {
                return _root.getAvailableOperators(_this.paramName());
            });

            _this.paramName.subscribe(function (name) {
                var param = _root.getAvailableParameterByName(name);
                if (param) {
                    _this.valueType(param.valueType());
                }
            });
        }

        function ViewModel() {
            var _this = this;

            this.availableParameters = ko.observableArray([]);

            this.mode = ko.observable('standard');

            this.expression = ko.observable();

            this.getAvailableOperators = function (paramName) {
                if (!paramName) {
                    return [];
                }

                var param = _this.getAvailableParameterByName(paramName);
                return param.supportedOperators();
            }

            this.getAvailableParameterByName = function (paramName) {
                return _.find(_this.availableParameters(),
                            function (param) {
                                return param.name() == paramName;
                            }
                        );
            }

            this.conditions = ko.observableArray([]);

            this.createCondition = function () {
                var condition = new ConditionViewModel(_this);
                condition.paramName(_this.availableParameters()[0].name());
                return condition;
            }

            this.addCondition = function (parent) {
                if (parent && parent.isGroup && parent.isGroup()) {
                    parent.conditions.push(_this.createCondition());
                } else {
                    _this.conditions.push(_this.createCondition());
                }
            }

            this.addConditionGroup = function () {
                var group = _this.createCondition();
                group.isGroup(true);
                group.conditions.push(_this.createCondition());
                _this.conditions.push(group);
            }

            this.removeCondition = function (condition) {
                _this.conditions.remove(condition);
            }

            this.getExpression = function () {
                var model = ko.mapping.toJS(_this);
                // Only conditions are needed
                model = {
                    conditions: model.conditions
                };

                return $.ajax({
                    url: '@Url.Action("GetExpression")',
                    type: 'POST',
                    data: JSON.stringify(model),
                    contentType: 'application/json; charset=utf-8'
                });
            }

            this.switchToExpertMode = function () {
                _this.getExpression()
                     .then(function (exp) {
                         _this.expression(exp);
                         _this.mode('expert');
                     });
            }

            this.switchToStandardMode = function () {
                $.get('@Url.Action("GetConditionModels")', {
                    commerceName: commerceName,
                    expression: encodeURIComponent(_this.expression())
                })
                .then(function (conditions) {
                    _this.conditions.removeAll();
                    $.each(conditions, function () {
                        var condition = new ConditionViewModel(_this);
                        ko.mapping.fromJS(this, koMappingConfig, condition);
                        _this.conditions.push(condition);
                    });

                    _this.mode('standard');
                });
            }
        }

        var viewModel = new ViewModel();

        $.get('@Url.Action("AvailableParameters")', { commerceName: commerceName, contextModelTypeName: contextModelTypeName })
         .then(function (data) {
             $.each(data, function () {
                 viewModel.availableParameters.push(ko.mapping.fromJS(this));
             });

             ko.applyBindings(viewModel, document.getElementById('conditions-container'));
         });

    });
</script>