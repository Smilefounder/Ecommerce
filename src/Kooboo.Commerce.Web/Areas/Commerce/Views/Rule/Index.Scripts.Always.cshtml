@using Newtonsoft.Json
@using Kooboo.Commerce.Web.Areas.Commerce.Models.Rules

<script type="text/html" id="RuleTemplate-Always">
    <div class="rule">
        @Html.IconImage("drag")
        <a class="action remove" href="#" data-bind="click: $root.RemoveRule">@Html.IconImage("minus-small")</a>
        <div class="wrap">
            <div class="columns">
                <div class="span1">
                    <span class="rule-label">ALWAYS</span>
                </div>
                <div class="span11">
                    <div>
                        <div>
                            <ul class="activities" data-bind="foreach: Activities">
                                <li>
                                    @Html.IconImage("drag")
                                    <a class="action" href="#" data-bind="click: $root.RemoveActivity.bind($data, $parent)">@Html.IconImage("minus-small")</a>
                                    <a class="action" href="#" data-bind="click: $root.EditActivity.bind($data, $parent)">@Html.IconImage("edit-small")</a>
                                    <span class="text" data-bind="text: Description"></span>
                                </li>
                            </ul>
                            <div class="action button dropdown only-icon">
                                <span>@Html.IconImage("plus-small")</span>
                                <ul data-bind="foreach: $root.AvailableActivities">
                                    <li>
                                        <a href="#" data-bind="text: DisplayName, click: $root.AddActivity.bind($data, $parent, Name)"></a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>

<script>
    (function () {

        var instance = '@CommerceInstance.Current.Name';
        var defaultModel = @Html.Raw(JsonConvert.SerializeObject(new AlwaysRuleModel(), new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Auto }));
        var defaultConfiguredActivityModel = @Html.Raw(JsonConvert.SerializeObject(new ConfiguredActivityModel()));

        function ActivityEditingContext(rule, configuredActivity, mode) {
            var self = this;

            self.model = function () {
                return ko.mapping.toJS(configuredActivity);
            }

            self.cancel = function () {
                ActivityEditingContext.complete();
                self.closeDialog();
            }

            self.accept = function (data) {
                ko.mapping.fromJS(data, {}, configuredActivity);
                if (mode === 'add') {
                    rule.Activities.push(configuredActivity);
                }
                ActivityEditingContext.complete();
                self.closeDialog();
            }

            self.closeDialog = function () {
                var pop = $.popContext.getCurrent();
                if (pop) {
                    pop.close();
                }
            }
        }

        ActivityEditingContext.begin = function (rule, configuredActivity, mode) {
            window.ActivityEditingContext = new ActivityEditingContext(rule, configuredActivity, mode);
        };

        ActivityEditingContext.complete = function () {
            window.ActivityEditingContext = null;
        }

        window.RuleTypes['Always'] = {

            Name: 'Always',
            
            DisplayName: 'ALWAYS',

            CreateModel: function (data) {
                var model = ko.mapping.fromJS(defaultModel);
                if (data) {
                    ko.mapping.fromJS(data, {}, model);
                }

                return model;
            },

            OnPageDataBinding: function (root) {
                $.extend(root, {

                    AddActivity: function (rule, activityName) {
                        var model = ko.mapping.fromJS(defaultConfiguredActivityModel);
                        model.ActivityName(activityName);

                        ActivityEditingContext.begin(rule, model, 'add');

                        $.pop({
                            height: 500,
                            url: '@Url.Action("AddActivity")?instance=' + instance + '&activityName=' + activityName
                        });
                    },

                    EditActivity: function (rule, activity) {
                        ActivityEditingContext.begin(rule, activity, 'edit');
                        $.pop({
                            height: 500,
                            url: '@Url.Action("EditActivity")?instance=' + instance + '&activityName=' + activity.ActivityName()
                        });
                    },

                    RemoveActivity: function (rule, activity) {
                        if (!confirm('@("Are you sure to remove this activity?".Localize())')) {
                            return false;
                        }

                        rule.Activities.remove(activity);
                    }
                });
            }
        };

    })();
</script>
