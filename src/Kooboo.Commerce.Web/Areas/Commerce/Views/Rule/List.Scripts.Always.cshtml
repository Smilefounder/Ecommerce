@using Newtonsoft.Json
@using Kooboo.Commerce.Web.Areas.Commerce.Models.Rules

<script type="text/html" id="RuleTemplate-Always">
    <div class="rule">
        <!-- ko if: $($element).parents('.rule').length === 1 -->
        <div class="summary">
            <a href="#" data-toggle="expand-rule">
                @Html.IconImage("toggle")
            </a>
            @Html.IconImage("drag")
            <a class="action remove" href="#" data-bind="click: $root.RemoveRule">@Html.IconImage("minus-small")</a>
            <div class="summary-text">
                <span class="tag">ALWAYS</span>
                <span data-toggle="expand-rule" data-bind="html: window.RuleTypes['Always'].GetActivitiesSummary($data), tooltip: window.RuleTypes['Always'].GetActivitiesTooltip($data)"></span>
            </div>
        </div>
        <!-- /ko -->
        <div class="detail" data-bind="style: { display: $($element).parents('.rule').length === 1 ? 'none' : '' }">
            @Html.IconImage("drag")
            <a class="action remove" href="#" data-bind="click: $root.RemoveRule">@Html.IconImage("minus-small")</a>
            <div class="wrap">
                <div class="columns">
                    <div class="span1">
                        <span class="rule-label">ALWAYS</span>
                    </div>
                    <div class="span11">
                        <ul class="activities" data-bind="sortable: { data: Activities, connectClass: $root.GenerateSortableConnectClass(), options: { handle: '.icon.drag' } }">
                            <li>
                                @Html.IconImage("drag")
                                <a class="action" href="#" data-bind="click: $root.RemoveActivity.bind($data, $parent)">@Html.IconImage("minus-small")</a>
                                <a class="action" href="#" data-bind="click: $root.EditActivity.bind($data, $parent)">@Html.IconImage("edit-small")</a>
                                <span class="text" data-bind="text: Description"></span>
                            </li>
                        </ul>
                        <div class="action button dropdown only-icon">
                            <span>@Html.IconImage("plus-small")</span>
                            <ul data-bind="foreach: $root.AvailableActivities">
                                <li>
                                    <a href="#" data-bind="text: DisplayName, click: $root.AddActivity.bind($data, $parent, Name)"></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            @Html.Partial("_RuleFooter")
        </div>
    </div>
</script>

<script>
    (function () {

        var instance = '@CommerceInstance.Current.Name';
        var defaultModel = @Html.Raw(JsonConvert.SerializeObject(new AlwaysRuleModel(), new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Objects }));
        var defaultConfiguredActivityModel = @Html.Raw(JsonConvert.SerializeObject(new ConfiguredActivityModel()));

        function ActivityEditingContext(rule, configuredActivity, mode) {
            var self = this;

            self.model = function () {
                return ko.mapping.toJS(configuredActivity);
            }

            self.cancel = function () {
                ActivityEditingContext.complete();
                self.closeDialog();
            }

            self.accept = function (data) {
                ko.mapping.fromJS(data, {}, configuredActivity);
                if (mode === 'add') {
                    rule.Activities.push(configuredActivity);
                }
                ActivityEditingContext.complete();
                self.closeDialog();
            }

            self.closeDialog = function () {
                var pop = $.popContext.getCurrent();
                if (pop) {
                    pop.close();
                }
            }
        }

        ActivityEditingContext.begin = function (rule, configuredActivity, mode) {
            window.ActivityEditingContext = new ActivityEditingContext(rule, configuredActivity, mode);
        };

        ActivityEditingContext.complete = function () {
            window.ActivityEditingContext = null;
        }

        window.RuleTypes['Always'] = {

            Name: 'Always',

            DisplayName: 'ALWAYS',

            CreateModel: function (data) {
                var model = ko.mapping.fromJS(defaultModel);
                if (data) {
                    ko.mapping.fromJS(data, {}, model);
                }

                return model;
            },

            GetActivitiesSummary: function (rule) {
                var html = '<span class="label">';

                if (rule.Activities().length > 0) {
                    html += rule.Activities()[0].Description();
                    if (rule.Activities().length > 1) {
                        html += '...';
                    }

                } else {
                    html += '[EMPTY]';
                }

                html += '</span>'

                return html;
            },

            GetActivitiesTooltip: function (rule) {
                if (rule.Activities().length <= 1) {
                    return '';
                }

                return window.RuleTypes['Always'].RenderTooltip(rule, 0);
            },

            RenderTooltip: function (rule, level) {
                var html = '<div style="padding-left:' + (10 * level) + 'px">';

                $.each(rule.Activities(), function (i) {
                    html += '<div>' + this.Description() + '</div>';
                });

                html += '</div>';
                html += '</div>';

                return html;
            },

            OnPageDataBinding: function (root) {
                $.extend(root, {

                    AddActivity: function (rule, activityName) {
                        var model = ko.mapping.fromJS(defaultConfiguredActivityModel);
                        model.ActivityName(activityName);

                        ActivityEditingContext.begin(rule, model, 'add');

                        $.pop({
                            height: 500,
                            url: '@Url.Action("AddActivity")?instance=' + instance + '&activityName=' + activityName
                        });
                    },

                    EditActivity: function (rule, activity) {
                        ActivityEditingContext.begin(rule, activity, 'edit');
                        $.pop({
                            height: 500,
                            url: '@Url.Action("EditActivity")?instance=' + instance + '&activityName=' + activity.ActivityName()
                        });
                    },

                    RemoveActivity: function (rule, activity) {
                        if (!confirm('@("Are you sure to remove this activity?".Localize())')) {
                            return false;
                        }

                        rule.Activities.remove(activity);
                    }
                });
            }
        };

    })();
</script>
