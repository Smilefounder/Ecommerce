
<div id="resource-link-editor-dialog" style="display:none">
    <div class="topbar">
        <h1 class="title" data-bind="text: dialogTitle"></h1>
    </div>
    <div class="wrap">
        <div class="common-form">
            <table>
                <tr>
                    <th>@("Relation".Localize())</th>
                    <td>
                        <input type="text" name="Relation" data-bind="value: link.relation" />
                    </td>
                </tr>
                <tr>
                    <th>@("Destination Resource".Localize())</th>
                    <td>
                        <select name="DestinationResourceName" 
                                data-bind="options: linkableResources, optionsText: 'resourceName', optionsValue: 'resourceName', value: link.destinationResourceName"></select>
                    </td>
                </tr>
                <tr>
                    <th>@("Parameters".Localize())</th>
                    <td>
                        <div class="message" data-bind="visible: link.requiredParameters().length === 0">
                            @("The linked resource does not require input parameters")
                        </div>
                        <div class="simple-table" style="display:none;margin-top:10px" data-bind="visible: link.requiredParameters().length > 0">
                            <table>
                                <tbody data-bind="foreach: { data: link.requiredParameters, template: 'ParamItemTemplate' }"></tbody>
                            </table>
                        </div>
                        <div style="display:none;margin-top:10px;" data-bind="visible: link.optionalParameters().length > 0">
                            <div>
                                <a href="#" data-bind="visible: isOptionalParametersVisible, click: toggleOptionalParameters">
                                    @Html.IconImage("chevron-down-black") @("Optional Parameters".Localize())
                                </a>
                                <a href="#" data-bind="visible: !isOptionalParametersVisible(), click: toggleOptionalParameters">
                                    @Html.IconImage("chevron-right-black") @("Optional Parameters".Localize())
                                </a>
                            </div>
                            <div class="simple-table" data-bind="visible: isOptionalParametersVisible">
                                <table>
                                    <tbody data-bind="template: { name: 'ParamItemTemplate', foreach: link.optionalParameters }"></tbody>
                                </table>
                            </div>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>

<script type="text/html" id="ParamItemTemplate">
    <tr>
        <td style="width:150px">
            <span data-bind="text: $root.getParameterDisplayName(name()), attr: { title: name }"></span>
        </td>
        <td style="width:200px">
            <!-- ko if: useFixedValue -->
            <input type="text" data-bind="value: value" />
            <!-- /ko -->
            <!-- ko if: !useFixedValue() -->
            <select data-bind="options: $root.getSuitableSourceResourceOutputParameters(parameterType()), optionsText: 'displayName', optionsCaption: '@("Choose source parameter".Localize())', optionsValue: 'name', value: value"></select>
            <!-- /ko -->
        </td>
        <td>
            <input type="checkbox" data-bind="checked: useFixedValue, attr: { id: 'UseFixedValue_' + $index() }" />
            <label class="inline" data-bind="attr: { 'for': 'UseFixedValue_' + $index() }">
                @("Fixed Value".Localize())
            </label>
        </td>
    </tr>
</script>

<script>
    (function ($) {
        var Texts = {
            AddLink: '@("Add Link".Localize())',
            EditLink: '@("Edit Link".Localize())',
            Save: '@("Save".Localize())',
            Cancel: '@("Cancel".Localize())'
        };

        function ViewModel() {
            var _this = this;

            this.dialogTitle = ko.observable(Texts.AddLink);

            this.sourceResourceName = ko.observable();

            this.linkableResources = ko.observableArray();

            this.link = {
                id: ko.observable(),
                relation: ko.observable(),
                destinationResourceName: ko.observable(),
                requiredParameters: ko.observableArray(),
                optionalParameters: ko.observableArray()
            };

            this.sourceResourceOutputParameters = ko.observableArray();

            this.getSuitableSourceResourceOutputParameters = function (paramType) {
                var params = [];
                $.each(_this.sourceResourceOutputParameters(), function () {
                    if (this.parameterType() === paramType) {
                        params.push(this);
                    }
                });

                return params;
            }

            this.getParameterDisplayName = function (paramName) {
                var index = paramName.indexOf('.');
                return index >= 0 ? paramName.substr(index + 1) : paramName;
            }

            this.isOptionalParametersVisible = ko.observable(false);

            this.toggleOptionalParameters = function () {
                _this.isOptionalParametersVisible(!_this.isOptionalParametersVisible());
            }
        }

        function ResourceLinkEditorDialog() {
            var _this = this;
            var _$dialog = null;
            var _callbacks = {};

            var _linkParamMappingOptions = {
                useFixedValue: {
                    create: function (args) {
                        var param = args.parent;
                        var observable = ko.observable(args.data);
                        observable.subscribe(function (value) {
                            _this.onUseFixedValueChanged(param, value);
                        });
                        return observable;
                    }
                }
            };

            this.model = new ViewModel();

            this.init = function () {
                _$dialog = $('#resource-link-editor-dialog');
                _$dialog.dialog({
                    autoOpen: false,
                    modal: true,
                    buttons: [
                        {
                            text: Texts.Save,
                            click: function () {
                                _this.save();
                            }
                        },
                        {
                            text: Texts.Cancel,
                            class: 'gray',
                            click: function () {
                                _this.close();
                            }
                        }
                    ]
                });

                _this.model.link.destinationResourceName.subscribe(_this.onDestinationResourceSelectionChanged);

                return loadLinkableResources().done(function () {
                            ko.applyBindings(_this.model, _$dialog[0]);
                       });
            }

            this.on = function (eventName, callback) {
                var callbacks = _callbacks[eventName];
                if (callbacks === undefined) {
                    callbacks = [];
                    _callbacks[eventName] = callbacks;
                }
                callbacks.push(callback);
            }

            this.trigger = function (eventName, args) {
                var callbacks = _callbacks[eventName];
                if (callbacks) {
                    $.each(callbacks, function () {
                        this.apply(_this, args);
                    });
                }
            }

            this.open = function (options) {
                _$dialog.dialog('open');

                _this.model.isOptionalParametersVisible(false);
                _this.model.link.id(null);
                _this.model.link.relation(null);
                _this.model.link.destinationResourceName(null);

                var resourceName = options.resourceName;
                var linkId = options.linkId || 0;

                _this.model.sourceResourceName(resourceName);

                loadResource(resourceName).done(function (data) {
                    ko.mapping.fromJS(data.outputParameters, {}, _this.model.sourceResourceOutputParameters);

                    if (linkId) {
                        // Load request resource link
                        loadResourceLink(linkId).done(function (data) {
                            var link = _this.model.link;
                            link.id(data.id);
                            link.relation(data.relation);
                            link.destinationResourceName(data.destinationResourceName);

                            _updateParameterListTask.done(function () {
                                updateParameterValues(data.requiredParameters, data.optionalParameters);
                            });
                        });
                    }
                });
            }

            this.onDestinationResourceSelectionChanged = function () {
                updateParameterList(_this.model.link.destinationResourceName());
            }

            this.onUseFixedValueChanged = function (param, value) {
                param.value(null);
            }

            this.save = function () {
                window.loading.show();

                $.ajax({
                    url: '@Url.Action("SaveLink", "HalResource")?sourceResourceName=' + _this.model.sourceResourceName(),
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(ko.toJS(_this.model.link))
                })
                .done(function (result) {
                    window.loading.hide();

                    if (result.Success) {
                        var linkId = result.Model.Id;
                        _this.model.link.id(linkId);
                        _this.trigger('saved', [linkId]);
                        _this.close();
                    } else {
                        info.show(result.Messages.join('<br/>'), false);
                    }
                });
            }

            this.close = function () {
                _$dialog.dialog('close');
            }

            // Helper Methods

            var _updateParameterListTask = null;

            function updateParameterList(destinationResourceName) {
                var sourceResourceName = _this.model.sourceResourceName();
                if (!sourceResourceName) {
                    return false;
                }

                var defer = $.Deferred();
                _updateParameterListTask = defer.promise();

                var link = _this.model.link;

                if (destinationResourceName) {
                    loadLinkParametersWithDefault(sourceResourceName, destinationResourceName).done(function (data) {
                        ko.mapping.fromJS(data.requiredParameters, _linkParamMappingOptions, link.requiredParameters);
                        ko.mapping.fromJS(data.optionalParameters, _linkParamMappingOptions, link.optionalParameters);
                        defer.resolve();
                        console.log('update param list done');
                    });
                } else {
                    defer.resolve();
                }
            }

            function updateParameterValues(requiredParamValues, optionalParamValues) {
                console.log('update param values');
                var link = _this.model.link;

                $.each(link.requiredParameters(), function () {
                    var paramName = this.name();
                    var newParam = _.find(requiredParamValues, function (it) {
                        return it.name === paramName;
                    });

                    if (newParam) {
                        updateParameterValue(this, newParam);
                    }
                });

                $.each(link.optionalParameters(), function () {
                    var paramName = this.name();
                    var newParam = _.find(optionalParamValues, function (it) {
                        return it.name === paramName;
                    });

                    if (newParam) {
                        updateParameterValue(this, newParam);
                    }
                });
            }

            function updateParameterValue(target, source) {
                target.useFixedValue(ko.utils.unwrapObservable(source.useFixedValue));
                target.value(ko.utils.unwrapObservable(source.value));
            }

            function loadLinkParametersWithDefault(sourceResourceName, destinationResourceName) {
                return $.get('@Url.Action("LoadLinkParametersWithDefault")', {
                    sourceResourceName: sourceResourceName,
                    destinationResourceName: destinationResourceName
                });
            }

            function loadLinkableResources() {
                return $.get('@Url.Action("LinkableResources", "HalResource")')
                        .then(function (data) {
                            ko.mapping.fromJS(data, {}, _this.model.linkableResources);
                        });
            }

            function loadResource(resourceName) {
                return $.get('@Url.Action("Resource", "HalResource")', { resourceName: resourceName });
            }

            function loadResourceLink(linkId) {
                return $.get('@Url.Action("ResourceLink", "HalResource")', { linkId: linkId });
            }
        }

        var instance = new ResourceLinkEditorDialog();
        var initTask = instance.init();

        ResourceLinkEditorDialog.open = function (options) {
            initTask.done(function () {
                instance.open(options);
            });
        };

        ResourceLinkEditorDialog.close = function () {
            instance.close();
        };

        ResourceLinkEditorDialog.on = function (eventName, callback) {
            instance.on(eventName, callback);
        }

        window.ResourceLinkEditorDialog = ResourceLinkEditorDialog;

    })(jQuery);
</script>