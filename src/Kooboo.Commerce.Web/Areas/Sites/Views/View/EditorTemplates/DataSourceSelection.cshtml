@model List<DataSourceSelection>
@{
    var dataSources = Newtonsoft.Json.JsonConvert.SerializeObject(ServiceFactory.GetService<DataSourceSettingManager>().All(Site.Current, null)
        .Select(it => new
        {
            Name = it.DataName,
            Relations = (it.Relations ?? new List<Kooboo.CMS.Sites.DataSource.DataSourceRelation>()).Select(ir => new { Name = ir.TargetDataSourceName, Checked = false }),
            Checked = false,
        }));
    var modelJson = Model == null ? "[]" : Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(it => new
    {
        it.MainDataSourceName,
        RelatedDataSources = it.RelatedDataSources ?? new List<string>()
    }));
    var fullPropertyName = ViewData.TemplateInfo.HtmlFieldPrefix;
    var elementId = fullPropertyName.Replace(".", "_");
    var listTemplateId = elementId + "_List";

    var editTemplateId = elementId + "_Editor";

    var viewEngine = (Kooboo.CMS.Sites.View.ITemplateEngine)ViewData["ViewEngine"];
}
<div class="block list active">
    <h6 class="title">
        @Html.IconImage("arrow")
        @("Data sources".Localize())
    </h6>
    <div id="@listTemplateId" class="container">
        <ul data-bind="foreach: selectedDataSources">
            <li data-bind="{attr:{id:'@listTemplateId'+'_li_' + $index()}}">
                <a class="action" data-bind="click: $parent.removeItem">@Html.IconImage("minus small")</a>
                <a class="action" data-bind="click:$parent.editItem">@Html.IconImage("edit small")</a>
                <span data-bind="text: $data.MainDataSourceName"></span>
                <ul data-bind="foreach: {data:$data.RelatedDataSources,as:'$relation'}">
                    <li>
                        <span data-bind="text: $relation"></span>
                        <input type="hidden" data-bind="value: $relation, attr: {name: $root.getPrefixFieldName($parentContext.$index()) + 'RelatedDataSources[' + $index() +']'}" />
                    </li>
                </ul>
                <input type="hidden" data-bind="value: $data.MainDataSourceName, attr: {name: $root.getPrefixFieldName($index()) + 'MainDataSourceName'}" />
            </li>
        </ul>
        <p class="actions clearfix">
            <a class="action right" data-bind="click:addItem">@Html.IconImage("plus small")</a>
        </p>
    </div>
</div>
<div class="hide">
    <div id="@editTemplateId" class="block dialog">
        <h2 class="title">@("Data source".Localize())</h2>
        <div class="common-form">
            <!--ko if: dataSources().length>0-->
            <div class="block treeview">
                <ul data-bind="foreach:dataSources">
                    <li class="tree-node clearfix active">
                        <span>
                            @Html.IconImage("folder")
                            <input type="checkbox" data-bind="checked: $data.Checked,attr:{id:'checkbox_'+$index()}" value="true" />
                            <label data-bind="text:$data.Name,attr:{for:'checkbox_'+$index()}" class="inline"></label>
                        </span>
                        <ul data-bind="foreach:$data.Relations">
                            <li>
                                <span>
                                    @Html.IconImage("folder")
                                    <input type="checkbox" data-bind="checked: $data.Checked,attr:{id:'checkbox_'+$index() +'_'+$parentContext.$index()}" value="true" />
                                    <label data-bind="text:$data.Name,attr:{for:'checkbox_'+$index() +'_'+$parentContext.$index()}" class="inline"></label>
                                </span>
                            </li>
                        </ul>
                    </li>

                </ul>
            </div>
            <p class="buttons">
                <a class="button save">
                    @("Save".Localize())
                </a>
                <a class="button gray cancel">
                    @("Cancel".Localize())
                </a>
            </p>
            <!--/ko-->
            <!--ko if: dataSources().length == 0-->
            <span>@("Not available data sources.".Localize())</span>
            <p class="buttons">
                <a class="button gray cancel">
                    @("Cancel".Localize())
                </a>
            </p>
            <!--/ko-->
        </div>
    </div>
</div>
<script type="text/javascript">
    var allDataSources = @Html.Raw(dataSources);
    var editTemplate = $('#@editTemplateId');
    var listTemplate = $('#@listTemplateId');
    var util = {
        wrapDataSources:function(dataSources){
            _.each(dataSources(),function(item){
                _.each(item.Relations(),function(ir){
                    ir.Checked.subscribe(function(newValue){
                        if (newValue==true) {
                            item.Checked(true);
                        }
                    });
                });
            });
            return dataSources;
        },
        showEditDialog:function(dataSources,closeCallback)
        {
            var editModel = new EditViewModel(dataSources);
            var dialoagTemplate = editTemplate.clone().attr('id',null);
            dialoagTemplate.insertAfter(editTemplate);
            ko.applyBindings(editModel, dialoagTemplate[0]);
            var dialog = dialoagTemplate.dialog({
                autoOpen: false,
                modal: true,
                width: 500,
                draggable: false,
                resizable: false,
                title: this.Name
            }).dialog('open');
            dialog.find('a.save').unbind('click').click(function () {
                closeCallback(editModel);
                ko.cleanNode(dialoagTemplate[0]);
                dialog.remove();
                dialoagTemplate.remove();
                //initDatasource(self.selectedDataSources());
            });
            dialog.find('a.cancel').one('click', function () {
                ko.cleanNode(dialoagTemplate[0]);
                dialog.remove();
                dialoagTemplate.remove();
            });
        }
    };

    var DatasourceAdapter=function(){
        var self = this;
        self.datasources = [];
        self.parse=function(ds,parentName){
            var name ="";
            if (typeof(ds)== "string") {//sub ds
                name =  ds;
            }
            else {
                var name = ds.MainDataSourceName();
            }
            var dsDef = _.find(meta.dataSourceMeta,function(d){return d.Name==name});
            var fullDsName=parentName?parentName+'.'+dsDef.Name:dsDef.Name;
            self.datasources.push({
                name:fullDsName,
                islist:dsDef.IsEnumerable,
                fields:dsDef.Definitions
            });
        };
        self.parseAll=function(list){
            self.datasources = [];
            _.each(list,function(ds){
                self.parse(ds);
                var subDs = ds.RelatedDataSources();
                _.each(subDs,function(sds){
                    self.parse(sds,ds.MainDataSourceName());
                });
            });
        };
    };

    function initDatasource(list){
        var ada = new DatasourceAdapter();
        ada.parseAll(list);
        if(typeof(PanelModel)!='undefined'){
            var panelModel = new PanelModel();
            panelModel.dataSource.fillDataSource(ada.datasources);
        }
    };

    function ListViewModel() {
        var self= this;
        self.selectedDataSources = ko.mapping.fromJS(@Html.Raw(modelJson));
        var namePrfix = '@fullPropertyName';
        self.getPrefixFieldName = function (index) {
            return namePrfix + '[' + (index) + '].';
        };
        self.addItem=function(){
            var availableDataSource = _.filter(allDataSources,function(it){
                available= _.find(self.selectedDataSources(),function(sit){
                    return sit.MainDataSourceName() == it.Name;
                })==null;
                return available;
            });
            var dataSources = util.wrapDataSources(ko.mapping.fromJS(availableDataSource));

            util.showEditDialog(dataSources,function(editModel){
                ko.utils.arrayPushAll(self.selectedDataSources, editModel.getSelectedDataSource());
            });

        };
        self.removeItem = function (item) {
            self.selectedDataSources.remove(item);
            //initDatasource(self.selectedDataSources());
        };
        self.editItem=function(item){
            var editDataSources  = _.filter(allDataSources,function(it){
                return item.MainDataSourceName() == it.Name;
            });
            _.each(editDataSources,function(it){
                it.Checked = true;
                _.each(it.Relations,function(ir){
                    var index = _.indexOf(item.RelatedDataSources(),ir.Name);
                    if (index!=-1) {
                        ir.Checked=true;
                    }
                    else {
                        ir.Checked=false;
                    }
                });
            });
            var dataSources = util.wrapDataSources(ko.mapping.fromJS(editDataSources));
            util.showEditDialog(dataSources,function(editModel){
                var selected = editModel.getSelectedDataSource();
                if (selected.length >0) {
                    item.MainDataSourceName(selected[0].MainDataSourceName());
                    item.RelatedDataSources.removeAll();
                    ko.utils.arrayPushAll(item.RelatedDataSources,selected[0].RelatedDataSources());
                }
                else {
                    self.selectedDataSources.remove(item);
                }
                //   self.selectedDataSources.splice(0,1,editModel.getSelectedDataSource());
            });
        }
    }
    var listModel = new ListViewModel();
    ko.applyBindings(listModel, listTemplate[0]);

    function EditViewModel(dataSources) {
        var self = this;
        self.dataSources = dataSources;
        self.getSelectedDataSource=function(){
            var selected =[];
            _.each(self.dataSources(),function(item){
                if (item.Checked()==true) {
                    var o = {'MainDataSourceName': ko.observable(item.Name()),'RelatedDataSources':ko.observableArray([])};
                    _.each(item.Relations(),function(ir){
                        if( ir.Checked()==true){
                            o.RelatedDataSources.push(ir.Name());
                        }
                    });
                    selected.push(o);
                }
            });
            return selected;
        }
    }

    $(function(){
        if (typeof(meta)!="undefined") {
            listModel.selectedDataSources.subscribe(function(){
                initDatasource(listModel.selectedDataSources());
            });
            initDatasource(listModel.selectedDataSources());
        }
    });

</script>
