<form class="common-form" id="invoice-reminder-config-form">
    <table>
        <tbody>
            <tr>
                <th>@("To".Localize())</th>
                <td>
                    <input type="text" data-bind="value: receivers" />
                    <em class="tip">
                        Comma separated email list. Use <code>{Customer}</code> as the placeholder for customer email
                    </em>
                </td>
            </tr>
            <tr>
                <th>@("Subject".Localize())</th>
                <td>
                    <input type="text" data-bind="value: subject" />
                    <em class="tip">Use <code>{param}</code> as the placeholder for parameter 'param'.</em>
                </td>
            </tr>
            <tr>
                <th>@("Body".Localize())</th>
                <td>
                    <textarea data-bind="value: body"></textarea>
                    <em class="tip">Use <code>{param}</code> as the placeholder for parameter 'param'.</em>
                </td>
            </tr>
            <tr>
                <th>@("Cancel if".Localize())</th>
                <td>
                    <span class="conditions-expression" data-bind="html: highlightedCancelCondition"></span>
                    <a href="#" data-bind="click: editCancelCondition">
                        @Html.IconImage("edit-small")
                    </a>
                    <div>
                        <em class="tip">
                            @("If the activity is executed asynchrously, it'll be cancelled if cancel condition is met.")
                        </em>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</form>

@Html.Partial("~/Areas/Commerce/Views/Shared/_ConditionsEditor.cshtml")

<script>
    $(function () {

        var cancelConditionModelType = '@(typeof(CancelConditionModel).AssemblyQualifiedNameWithoutVersion())';

        var editor = ActivityEditor.current();
        var model = new OrderReminderViewModel();
        var ruleId = editor.model().ruleId();

        editor.on('databound', function (sender, args) {
            ko.applyBindings(model, document.getElementById('invoice-reminder-config-form'));

            var attachedActivityInfoId = editor.model().attachedActivityInfoId();
            if (attachedActivityInfoId) {
                var url = '@Url.Action("GetConfig", "OrderReminder", new { area = Strings.AreaName })';
                return $.get(url + '?ruleId=' + ruleId + '&attachedActivityInfoId=' + attachedActivityInfoId)
                        .then(function (data) {
                            ko.mapping.fromJS(data, {}, model);
                        });
            }
        });

        editor.on('saving', function (sender, args) {
        });

        editor.on('saved', function (sender, args) {
            var attachedActivityId = editor.model().attachedActivityInfoId();
            var url = '@Url.Action("SaveConfig", "OrderReminder", new { area = Strings.AreaName })';
            return kb.http.safePost(url + '?ruleId=' + ruleId + '&attachedActivityInfoId=' + attachedActivityId, ko.mapping.toJS(model));
        });

        ConditionsEditor.init({
            contextModelTypeName: cancelConditionModelType,
            save: function (exp) {
                model.cancelCondition(exp);
            }
        });

        function OrderReminderViewModel() {
            var _this = this;

            this.receivers = ko.observable('{Customer}');
            
            this.subject = ko.observable();

            this.body = ko.observable();

            this.showCancelCondition = ko.observable();

            this.cancelCondition = ko.observable();

            this.highlightedCancelCondition = ko.observable();

            this.editCancelCondition = function () {
                ConditionsEditor.open({
                    title: '@("Cancel Condition".Localize())',
                    expression: _this.cancelCondition()
                });
            }

            _this.cancelCondition.subscribe(function (exp) {
                if (exp === null || exp === undefined || exp === '') {
                    _this.highlightedCancelCondition(null);
                } else {
                    $.get('/Commerce/Condition/PrettifyConditionsExpression', {
                        expression: exp,
                        contextModelType: cancelConditionModelType
                    })
                    .done(function (html) {
                        _this.highlightedCancelCondition(html);
                    });
                }
            });
        }
    });
</script>