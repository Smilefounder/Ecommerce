@model ByWeightShippingRulesModel
@{
    Layout = "~/Areas/Commerce/Views/Shared/AddIns/_ShippingRateProviderSettings.cshtml";
}

@using (Html.BeginForm())
{
    @Html.HiddenFor(m => m.ShippingMethodId)
    <div class="simple-table">
        <div class="toolbar">
            <a class="button" href="#" data-bind="click: addRule">@("Add Rule".Localize())</a>
        </div>
        <table>
            <thead>
                <tr>
                    <th>@("From weight".Localize())</th>
                    <th>@("To weight".Localize())</th>
                    <th>@("Charge".Localize())</th>
                    <th class="action"></th>
                    <th class="action"></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: rules">
                <tr data-bind="if: !isEditing()">
                    <td>
                        <span data-bind="text: fromWeight"></span> @("KG".Localize())
                    </td>
                    <td>
                        <span data-bind="text: toWeight"></span> @("KG".Localize())
                    </td>
                    <td>
                        <span data-bind="text: shippingPrice"></span>
                        <!--ko text: $root.priceUnitDisplayName($data.priceUnit()) --><!-- /ko -->
                    </td>
                    <td class="action">
                        <a class="action" data-bind="click: $root.editRule" href="#">@Html.IconImage("edit-small")</a>
                    </td>
                    <td class="action">
                        <a class="action" data-bind="click: $root.removeRule" href="#">@Html.IconImage("minus-small")</a>

                        <!-- hidden fields for submit -->
                        <input type="hidden" data-bind="value: fromWeight, attr: { name: 'Rules[' + $index() + '].FromWeight' }" />
                        <input type="hidden" data-bind="value: toWeight, attr: { name: 'Rules[' + $index() + '].ToWeight' }" />
                        <input type="hidden" data-bind="value: shippingPrice, attr: { name: 'Rules[' + $index() + '].ShippingPrice' }" />
                        <input type="hidden" data-bind="value: priceUnit, attr: { name: 'Rules[' + $index() + '].PriceUnit' }" />
                    </td>
                </tr>
                <tr data-bind="if: isEditing">
                    <td>
                        <input type="text" data-bind="value: fromWeight" class="small" placeholder="@("KG".Localize())">
                    </td>
                    <td>
                        <input type="text" data-bind="value: toWeight" class="small" placeholder="@("KG".Localize())">
                    </td>
                    <td>
                        <input type="text" data-bind="value: shippingPrice" class="small" placeholder="@("Price".Localize())">
                        <select data-bind="options: $root.availablePriceUnits, optionsText: 'text', optionsValue: 'value', value: priceUnit" class="small"></select>
                    </td>
                    <td>
                        <a data-bind="click: $root.commitRuleEditing">@Html.IconImage("save-small")</a>
                    </td>
                    <td>
                        <a data-bind="click: $root.cancelRuleEditing">@Html.IconImage("minus-small")</a>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}

<script>
    var jsModel = @Html.Raw(Model.ToJson(PropertyNaming.CamelCase));

    var RulesViewModel = function () {
        var _this = this;

        this.priceUnitDisplayName = function (name) {
            var unit = _.find(_this.availablePriceUnits(), function (x) {
                return x.value() == name;
            });

            if (unit) {
                return unit.text();
            }

            return name;
        }

        this.addRule = function () {
            var rule = new RuleViewModel();
            rule.isEditing(true);
            _this.rules.push(rule);
        }

        this.editRule = function (rule) {
            createRuleMemo(rule);
            rule.isEditing(true);
        }

        this.removeRule = function (rule) {
            _this.rules.remove(rule);
        }

        this.commitRuleEditing = function (rule) {
            destroyRuleMemo(rule);
            rule.isEditing(false);
        }

        this.cancelRuleEditing = function (rule) {
            if (rule.memo) {
                recoverRuleFromMemo(rule);
                rule.isEditing(false);
            } else { // is creating rule
                _this.rules.remove(rule);
            }
        }

        function createRuleMemo(rule) {
            rule.memo = ko.mapping.toJS(rule);
        }

        function recoverRuleFromMemo(rule) {
            if (rule.memo) {
                ko.mapping.fromJS(rule.memo, {}, rule);
                delete rule.memo;
            }
        }

        function destroyRuleMemo(rule) {
            delete rule.memo;
        }
    };

    var RuleViewModel = function () {

        this.isEditing = ko.observable(false);

        this.id = ko.observable(0);

        this.fromWeight = ko.observable();

        this.toWeight = ko.observable();

        this.shippingPrice = ko.observable();

        this.priceUnit = ko.observable();
    };

    var viewModel = new RulesViewModel();
    var mappingOptions = {
        rules: {
            create: function (args) {
                var data = args.data;
                var vm = new RuleViewModel();
                ko.mapping.fromJS(data, {}, vm);
                return vm;
            }
        }
    };
    viewModel = ko.mapping.fromJS(jsModel, mappingOptions, viewModel);

    $(function () {
        ko.applyBindings(viewModel, document.getElementById('#byweight-shipping-rules-form'));
    });
</script>